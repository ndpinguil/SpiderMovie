var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
));
var import_react = require("@testing-library/react"), React = __toESM(require("react")), import__ = __toESM(require("..")), import_jsx_runtime = require("react/jsx-runtime");
describe("modules/mergeRefs", () => {
  test("merges refs of different types", () => {
    const ref = React.createRef(null);
    let functionRefValue = null, hookRef;
    function Component() {
      const functionRef = (x) => {
        functionRefValue = x;
      };
      return hookRef = React.useRef(null), /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", { ref: (0, import__.default)(ref, hookRef, functionRef) });
    }
    (0, import_react.render)(/* @__PURE__ */ (0, import_jsx_runtime.jsx)(Component, {})), expect(ref.current).toBeInstanceOf(HTMLDivElement), expect(hookRef.current).toBeInstanceOf(HTMLDivElement), expect(functionRefValue).toBeInstanceOf(HTMLDivElement);
  });
});
//# sourceMappingURL=index-test.js.map
