"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var useElementLayout_exports = {};
__export(useElementLayout_exports, {
  default: () => useElementLayout
});
module.exports = __toCommonJS(useElementLayout_exports);
var import_canUseDOM = __toESM(require("../canUseDOM")), import_UIManager = __toESM(require("../UIManager/index")), import_useLayoutEffect = __toESM(require("../useLayoutEffect/index"));
const DOM_LAYOUT_HANDLER_NAME = "__reactLayoutHandler";
let didWarn = !import_canUseDOM.default, resizeObserver = null;
function getResizeObserver() {
  return import_canUseDOM.default && typeof window.ResizeObserver < "u" ? resizeObserver == null && (resizeObserver = new window.ResizeObserver(function(entries) {
    entries.forEach((entry) => {
      const node = entry.target, onLayout = node[DOM_LAYOUT_HANDLER_NAME];
      typeof onLayout == "function" && import_UIManager.default.measure(node, (x, y, width, height, left, top) => {
        const event = {
          // @ts-ignore
          nativeEvent: {
            layout: { x, y, width, height, left, top }
          },
          timeStamp: Date.now()
        };
        Object.defineProperty(event.nativeEvent, "target", {
          enumerable: !0,
          get: () => entry.target
        }), onLayout(event);
      });
    });
  })) : didWarn || process.env.NODE_ENV !== "production" && process.env.NODE_ENV !== "test" && (console.warn(
    "onLayout relies on ResizeObserver which is not supported by your browser. Please include a polyfill, e.g., https://github.com/que-etc/resize-observer-polyfill."
  ), didWarn = !0), resizeObserver;
}
function useElementLayout(ref, onLayout) {
  const observer = getResizeObserver();
  (0, import_useLayoutEffect.default)(() => {
    const node = ref.current;
    node != null && (node[DOM_LAYOUT_HANDLER_NAME] = onLayout);
  }, [ref, onLayout]), (0, import_useLayoutEffect.default)(() => {
    const node = ref.current;
    return node != null && observer != null && (typeof node[DOM_LAYOUT_HANDLER_NAME] == "function" ? observer.observe(node) : observer.unobserve(node)), () => {
      node != null && observer != null && observer.unobserve(node);
    };
  }, [ref, observer]);
}
//# sourceMappingURL=index.js.map
