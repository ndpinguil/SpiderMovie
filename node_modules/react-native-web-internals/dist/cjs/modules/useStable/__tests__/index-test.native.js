"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
));
var ReactDOM = __toESM(require("react-dom")), import_test_utils = require("react-dom/test-utils"), import__ = __toESM(require("..")), import_jsx_runtime = require("react/jsx-runtime");
function createRoot(rootNode) {
  return {
    render(element) {
      ReactDOM.render(element, rootNode);
    }
  };
}
describe("useStable", () => {
  let root, rootNode, spy = {};
  const TestComponent = ({ initialValueCallback }) => {
    const value = (0, import__.default)(initialValueCallback);
    return spy.value = value, null;
  };
  beforeEach(() => {
    spy = {}, rootNode = document.createElement("div"), document.body.appendChild(rootNode), root = createRoot(rootNode);
  }), afterEach(() => {
    root.render(null), document.body.removeChild(rootNode), rootNode = null, root = null;
  }), test("correctly sets the initial value", () => {
    const initialValueCallback = () => 5;
    (0, import_test_utils.act)(() => {
      root.render(/* @__PURE__ */ (0, import_jsx_runtime.jsx)(TestComponent, { initialValueCallback }));
    }), expect(spy.value).toBe(5);
  }), test("does not change the value", () => {
    let counter = 0;
    const initialValueCallback = () => counter++;
    (0, import_test_utils.act)(() => {
      root.render(/* @__PURE__ */ (0, import_jsx_runtime.jsx)(TestComponent, { initialValueCallback }));
    }), expect(spy.value).toBe(0), (0, import_test_utils.act)(() => {
      root.render(/* @__PURE__ */ (0, import_jsx_runtime.jsx)(TestComponent, { initialValueCallback }));
    }), expect(spy.value).toBe(0);
  }), test("only calls the callback once", () => {
    let counter = 0;
    const initialValueCallback = () => counter++;
    (0, import_test_utils.act)(() => {
      root.render(/* @__PURE__ */ (0, import_jsx_runtime.jsx)(TestComponent, { initialValueCallback }));
    }), expect(counter).toBe(1), (0, import_test_utils.act)(() => {
      root.render(/* @__PURE__ */ (0, import_jsx_runtime.jsx)(TestComponent, { initialValueCallback }));
    }), expect(counter).toBe(1);
  }), test("does not change the value if the callback initially returns null", () => {
    let counter = 0;
    const initialValueCallback = () => counter === 0 ? (counter++, null) : counter++;
    (0, import_test_utils.act)(() => {
      root.render(/* @__PURE__ */ (0, import_jsx_runtime.jsx)(TestComponent, { initialValueCallback }));
    }), expect(spy.value).toBe(null), (0, import_test_utils.act)(() => {
      root.render(/* @__PURE__ */ (0, import_jsx_runtime.jsx)(TestComponent, { initialValueCallback }));
    }), expect(spy.value).toBe(null);
  });
});
//# sourceMappingURL=index-test.js.map
