var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var normalizeColor_exports = {};
__export(normalizeColor_exports, {
  default: () => normalizeColor_default
});
module.exports = __toCommonJS(normalizeColor_exports);
var import_isWebColor = __toESM(require("../../modules/isWebColor")), import_processColor = require("../../modules/processColor");
const normalizeColor = (color, opacity = 1) => {
  if (color == null)
    return;
  if (typeof color == "string" && (0, import_isWebColor.default)(color))
    return color;
  const colorInt = (0, import_processColor.processColor)(color);
  if (colorInt != null) {
    const r = colorInt >> 16 & 255, g = colorInt >> 8 & 255, b = colorInt & 255, alpha = ((colorInt >> 24 & 255) / 255 * opacity).toFixed(2);
    return `rgba(${r},${g},${b},${alpha})`;
  }
  if (typeof color == "string")
    return color;
};
var normalizeColor_default = normalizeColor;
//# sourceMappingURL=normalizeColor.js.map
