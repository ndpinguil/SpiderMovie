"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var createCSSStyleSheet_exports = {};
__export(createCSSStyleSheet_exports, {
  default: () => createCSSStyleSheet
});
module.exports = __toCommonJS(createCSSStyleSheet_exports);
var import_canUseDOM = __toESM(require("../../modules/canUseDOM"));
function createCSSStyleSheet(id, rootNode, textContent) {
  if (import_canUseDOM.default) {
    const root = rootNode ?? document;
    let element = root.getElementById(id);
    if (element == null)
      if (element = document.createElement("style"), element.setAttribute("id", id), typeof textContent == "string" && element.appendChild(document.createTextNode(textContent)), root instanceof ShadowRoot)
        root.insertBefore(element, root.firstChild);
      else {
        const head = root.head;
        head && head.insertBefore(element, head.firstChild);
      }
    return element.sheet;
  } else
    return null;
}
//# sourceMappingURL=createCSSStyleSheet.js.map
