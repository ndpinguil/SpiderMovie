import {
  composeEventHandlers,
  createStyledContext,
  getVariableValue,
  isWeb,
  styled,
  useComposedRefs,
  useProps,
  useTheme,
  withStaticProperties
} from "@tamagui/core";
import { createContextScope } from "@tamagui/create-context";
import { registerFocusable } from "@tamagui/focusable";
import { getFontSize } from "@tamagui/font-size";
import { getSize } from "@tamagui/get-token";
import { useGetThemedIcon } from "@tamagui/helpers-tamagui";
import { useLabelContext } from "@tamagui/label";
import { ThemeableStack } from "@tamagui/stacks";
import { useControllableState } from "@tamagui/use-controllable-state";
import { usePrevious } from "@tamagui/use-previous";
import * as React from "react";
const CheckboxStyledContext = createStyledContext({
  size: "$true",
  scaleIcon: 1
});
function isIndeterminate(checked) {
  return checked === "indeterminate";
}
function getState(checked) {
  return isIndeterminate(checked) ? "indeterminate" : checked ? "checked" : "unchecked";
}
const BubbleInput = (props) => {
  const { checked, bubbles = true, control, isHidden, ...inputProps } = props;
  const ref = React.useRef(null);
  const prevChecked = usePrevious(checked);
  React.useEffect(() => {
    const input = ref.current;
    const inputProto = window.HTMLInputElement.prototype;
    const descriptor = Object.getOwnPropertyDescriptor(
      inputProto,
      "checked"
    );
    const setChecked = descriptor.set;
    if (prevChecked !== checked && setChecked) {
      const event = new Event("click", { bubbles });
      input.indeterminate = isIndeterminate(checked);
      setChecked.call(input, isIndeterminate(checked) ? false : checked);
      input.dispatchEvent(event);
    }
  }, [prevChecked, checked, bubbles]);
  return <input
    type="checkbox"
    defaultChecked={isIndeterminate(checked) ? false : checked}
    {...inputProps}
    tabIndex={-1}
    ref={ref}
    aria-hidden={isHidden}
    style={{
      ...isHidden ? {
        // ...controlSize,
        position: "absolute",
        pointerEvents: "none",
        opacity: 0,
        margin: 0
      } : {
        appearance: "auto",
        accentColor: "var(--color6)"
      },
      ...props.style
    }}
  />;
};
const INDICATOR_NAME = "CheckboxIndicator";
const CheckboxIndicatorFrame = styled(ThemeableStack, {
  // use Checkbox for easier themes
  name: INDICATOR_NAME,
  context: CheckboxStyledContext
});
const CheckboxIndicator = CheckboxIndicatorFrame.extractable(
  React.forwardRef(
    (props, forwardedRef) => {
      const {
        __scopeCheckbox,
        children: childrenProp,
        forceMount,
        disablePassStyles,
        ...indicatorProps
      } = props;
      const context = useCheckboxContext(INDICATOR_NAME, __scopeCheckbox);
      const styledContext = React.useContext(CheckboxStyledContext);
      const iconSize = (typeof styledContext.size === "number" ? styledContext.size * 0.65 : getFontSize(styledContext.size)) * styledContext.scaleIcon;
      const theme = useTheme();
      const getThemedIcon = useGetThemedIcon({ size: iconSize, color: theme.color });
      const childrens = React.Children.toArray(childrenProp);
      const children = childrens.map((child) => {
        if (disablePassStyles || !React.isValidElement(child)) {
          return child;
        }
        return getThemedIcon(child);
      });
      if (forceMount || isIndeterminate(context.state) || context.state === true)
        return <CheckboxIndicatorFrame
          data-state={getState(context.state)}
          data-disabled={context.disabled ? "" : void 0}
          pointerEvents="none"
          {...indicatorProps}
          ref={forwardedRef}
        >{children}</CheckboxIndicatorFrame>;
      return null;
    }
  )
);
CheckboxIndicator.displayName = INDICATOR_NAME;
const CHECKBOX_NAME = "Checkbox";
const CheckboxFrame = styled(ThemeableStack, {
  name: CHECKBOX_NAME,
  tag: "button",
  context: CheckboxStyledContext,
  variants: {
    unstyled: {
      false: {
        size: "$true",
        backgroundColor: "$background",
        alignItems: "center",
        justifyContent: "center",
        pressTheme: true,
        focusable: true,
        borderWidth: 1,
        borderColor: "$borderColor",
        hoverStyle: {
          borderColor: "$borderColorHover"
        },
        focusStyle: {
          borderColor: "$borderColorFocus"
        }
      }
    },
    size: {
      "...size": (val, { tokens }) => {
        const radiusToken = getVariableValue(getSize(val)) / 8;
        return {
          borderRadius: radiusToken
        };
      }
    }
  },
  defaultVariants: {
    unstyled: false
  }
});
const [createCheckboxContext, createCheckboxScope] = createContextScope(CHECKBOX_NAME);
const [CheckboxProvider, useCheckboxContext] = createCheckboxContext(CHECKBOX_NAME);
const CheckboxComponent = CheckboxFrame.extractable(
  React.forwardRef(function Checkbox(props, forwardedRef) {
    const {
      __scopeCheckbox,
      labelledBy: ariaLabelledby,
      name,
      checked: checkedProp,
      defaultChecked,
      required,
      scaleSize = 0.45,
      sizeAdjust = 0,
      disabled,
      value = "on",
      onCheckedChange,
      native,
      scaleIcon,
      ...checkboxProps
    } = props;
    const [button, setButton] = React.useState(null);
    const composedRefs = useComposedRefs(forwardedRef, (node) => setButton(node));
    const hasConsumerStoppedPropagationRef = React.useRef(false);
    const propsActive = useProps(props);
    const isFormControl = isWeb ? button ? Boolean(button.closest("form")) : true : false;
    const [checked = false, setChecked] = useControllableState({
      prop: checkedProp,
      defaultProp: defaultChecked,
      onChange: onCheckedChange
    });
    const styledContext = React.useContext(CheckboxStyledContext);
    const adjustedSize = getVariableValue(
      getSize(propsActive.size ?? styledContext?.size ?? "$true", {
        shift: sizeAdjust
      })
    );
    const size = scaleSize ? Math.round(adjustedSize * scaleSize) : adjustedSize;
    const labelId = useLabelContext(button);
    const labelledBy = ariaLabelledby || labelId;
    if (process.env.TAMAGUI_TARGET === "native") {
      React.useEffect(() => {
        if (!props.id)
          return;
        return registerFocusable(props.id, {
          focusAndSelect: () => {
            setChecked((x) => !x);
          },
          focus: () => {
          }
        });
      }, [props.id, setChecked]);
    }
    return <CheckboxProvider scope={__scopeCheckbox} state={checked} disabled={disabled}>{isWeb && native ? <BubbleInput
      control={button}
      bubbles={!hasConsumerStoppedPropagationRef.current}
      name={name}
      value={value}
      checked={checked}
      required={required}
      disabled={disabled}
      id={props.id}
    /> : <>
      <CheckboxFrame
        width={size}
        height={size}
        tag="button"
        role="checkbox"
        aria-labelledby={labelledBy}
        aria-checked={isIndeterminate(checked) ? "mixed" : checked}
        aria-required={required}
        data-state={getState(checked)}
        data-disabled={disabled ? "" : void 0}
        disabled={disabled}
        {...checkboxProps}
        ref={composedRefs}
        {...isWeb && {
          type: "button",
          value,
          onKeyDown: composeEventHandlers(
            props.onKeyDown,
            (event) => {
              if (event.key === "Enter")
                event.preventDefault();
            }
          )
        }}
        onPress={composeEventHandlers(props.onPress, (event) => {
          setChecked(
            (prevChecked) => isIndeterminate(prevChecked) ? true : !prevChecked
          );
          if (isFormControl) {
            hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();
            if (!hasConsumerStoppedPropagationRef.current)
              event.stopPropagation();
          }
        })}
      ><CheckboxStyledContext.Provider
        size={propsActive.size ?? styledContext?.size ?? "$true"}
        scaleIcon={scaleIcon ?? styledContext?.scaleIcon ?? 1}
      >{propsActive.children}</CheckboxStyledContext.Provider></CheckboxFrame>
      {isWeb && isFormControl ? <BubbleInput
        isHidden
        control={button}
        bubbles={!hasConsumerStoppedPropagationRef.current}
        name={name}
        value={value}
        checked={checked}
        required={required}
        disabled={disabled}
      /> : null}
    </>}</CheckboxProvider>;
  })
);
const Checkbox2 = withStaticProperties(CheckboxComponent, {
  Indicator: CheckboxIndicator,
  Props: CheckboxStyledContext.Provider
});
export {
  BubbleInput,
  Checkbox2 as Checkbox,
  CheckboxFrame,
  CheckboxStyledContext,
  createCheckboxScope,
  getState,
  isIndeterminate
};
//# sourceMappingURL=Checkbox.mjs.map
