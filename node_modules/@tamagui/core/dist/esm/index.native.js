import { useResponderEvents } from "@tamagui/react-native-use-responder-events";
import {
  Stack as WebStack,
  Text as WebText,
  composeEventHandlers,
  setupHooks
} from "@tamagui/web";
import { getBaseViews } from "./getBaseViews";
import { useElementLayout } from "./hooks/useElementLayout";
import { usePlatformMethods } from "./hooks/usePlatformMethods";
import { usePressability } from "./vendor/Pressability";
export * from "@tamagui/web";
export * from "./reactNativeTypes";
const Stack = WebStack, Text = WebText;
setupHooks({
  getBaseViews,
  usePropsTransform(elementType, propsIn, hostRef) {
    const {
      // event props
      onMoveShouldSetResponder,
      onMoveShouldSetResponderCapture,
      onResponderEnd,
      onResponderGrant,
      onResponderMove,
      onResponderReject,
      onResponderRelease,
      onResponderStart,
      onResponderTerminate,
      onResponderTerminationRequest,
      onScrollShouldSetResponder,
      onScrollShouldSetResponderCapture,
      onSelectionChangeShouldSetResponder,
      onSelectionChangeShouldSetResponderCapture,
      onStartShouldSetResponder,
      onStartShouldSetResponderCapture,
      // android
      collapsable,
      focusable,
      // deprecated,
      accessible,
      accessibilityDisabled,
      onLayout,
      hrefAttrs,
      ...viewProps
    } = propsIn;
    if (usePlatformMethods(hostRef), useElementLayout(hostRef, onLayout), useResponderEvents(hostRef, {
      onMoveShouldSetResponder,
      onMoveShouldSetResponderCapture,
      onResponderEnd,
      onResponderGrant,
      onResponderMove,
      onResponderReject,
      onResponderRelease,
      onResponderStart,
      onResponderTerminate,
      onResponderTerminationRequest,
      onScrollShouldSetResponder,
      onScrollShouldSetResponderCapture,
      onSelectionChangeShouldSetResponder,
      onSelectionChangeShouldSetResponderCapture,
      onStartShouldSetResponder,
      onStartShouldSetResponderCapture
    }), viewProps.href !== void 0 && hrefAttrs !== void 0) {
      const { download, rel, target } = hrefAttrs;
      download != null && (viewProps.download = download), rel != null && (viewProps.rel = rel), typeof target == "string" && (viewProps.target = target.charAt(0) !== "_" ? `_${target}` : target);
    }
    return viewProps;
  },
  useEvents(viewProps, events, { pseudos }, setStateShallow) {
    {
      !!pseudos?.focusStyle && (viewProps.onFocus = composeEventHandlers(viewProps.onFocus, () => {
        setStateShallow({ focus: !0 });
      }), viewProps.onBlur = composeEventHandlers(viewProps.onBlur, () => {
        setStateShallow({ focus: !1 });
      })), events && viewProps.hitSlop && (events.hitSlop = viewProps.hitSlop);
      const pressability = usePressability(events || null);
      if (events && events.onPress)
        for (const key in pressability) {
          const og = viewProps[key], val = pressability[key];
          viewProps[key] = og && !dontComposePressabilityKeys[key] ? composeEventHandlers(og, val) : val;
        }
    }
  }
});
const dontComposePressabilityKeys = {
  onClick: !0
};
export {
  Stack,
  Text
};
//# sourceMappingURL=index.js.map
