import { AnimatePresence } from "@tamagui/animate-presence";
import { createContextScope } from "@tamagui/create-context";
import { useControllableState } from "@tamagui/use-controllable-state";
import {
  Stack,
  composeEventHandlers,
  styled,
  withStaticProperties
} from "@tamagui/web";
import * as React from "react";
const COLLAPSIBLE_NAME = "Collapsible";
const [createCollapsibleContext, createCollapsibleScope] = createContextScope(COLLAPSIBLE_NAME);
const [CollapsibleProvider, useCollapsibleContext] = createCollapsibleContext(COLLAPSIBLE_NAME);
const _Collapsible = React.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeCollapsible,
      open: openProp,
      defaultOpen,
      disabled,
      onOpenChange,
      ...collapsibleProps
    } = props;
    const [open = false, setOpen] = useControllableState({
      prop: openProp,
      defaultProp: defaultOpen,
      onChange: onOpenChange
    });
    return <CollapsibleProvider
      scope={__scopeCollapsible}
      disabled={disabled}
      contentId={React.useId()}
      open={open}
      onOpenToggle={React.useCallback(
        () => setOpen((prevOpen) => !prevOpen),
        [setOpen]
      )}
    ><Stack
      data-state={getState(open)}
      data-disabled={disabled ? "" : void 0}
      {...collapsibleProps}
      ref={forwardedRef}
    /></CollapsibleProvider>;
  }
);
_Collapsible.displayName = COLLAPSIBLE_NAME;
const TRIGGER_NAME = "CollapsibleTrigger";
const CollapsibleTriggerFrame = styled(Stack, {
  name: TRIGGER_NAME,
  tag: "button"
});
const CollapsibleTrigger = CollapsibleTriggerFrame.styleable(
  (props, forwardedRef) => {
    const { __scopeCollapsible, children, ...triggerProps } = props;
    const context = useCollapsibleContext(TRIGGER_NAME, __scopeCollapsible);
    return <CollapsibleTriggerFrame
      aria-controls={context.contentId}
      aria-expanded={context.open || false}
      data-state={getState(context.open)}
      data-disabled={context.disabled ? "" : void 0}
      disabled={context.disabled}
      {...triggerProps}
      ref={forwardedRef}
      onPress={composeEventHandlers(props.onPress, context.onOpenToggle)}
    >{typeof children === "function" ? children({ open: context.open }) : children}</CollapsibleTriggerFrame>;
  }
);
CollapsibleTrigger.displayName = TRIGGER_NAME;
const CONTENT_NAME = "CollapsibleContent";
const CollapsibleContentFrame = styled(Stack, {
  name: CONTENT_NAME
});
const CollapsibleContent = CollapsibleContentFrame.styleable((props, forwardedRef) => {
  const { forceMount, children, __scopeCollapsible, ...contentProps } = props;
  const context = useCollapsibleContext(CONTENT_NAME, __scopeCollapsible);
  return <AnimatePresence {...contentProps}>{forceMount || context.open ? <CollapsibleContentFrame ref={forwardedRef} {...contentProps}>{children}</CollapsibleContentFrame> : null}</AnimatePresence>;
});
CollapsibleContent.displayName = CONTENT_NAME;
function getState(open) {
  return open ? "open" : "closed";
}
const Collapsible = withStaticProperties(_Collapsible, {
  Trigger: CollapsibleTrigger,
  Content: CollapsibleContent
});
export {
  Collapsible,
  CollapsibleContent,
  CollapsibleContentFrame,
  CollapsibleTrigger,
  CollapsibleTriggerFrame,
  createCollapsibleScope
};
//# sourceMappingURL=Collapsible.mjs.map
