import { createContextScope } from "@tamagui/create-context";
import { getButtonSized } from "@tamagui/get-button-sized";
import { Group, useGroupItem } from "@tamagui/group";
import { RovingFocusGroup, createRovingFocusGroupScope } from "@tamagui/roving-focus";
import { SizableStack, ThemeableStack } from "@tamagui/stacks";
import { useControllableState } from "@tamagui/use-controllable-state";
import { useDirection } from "@tamagui/use-direction";
import {
  Theme,
  composeEventHandlers,
  composeRefs,
  isWeb,
  styled,
  useEvent,
  withStaticProperties
} from "@tamagui/web";
import * as React from "react";
const TAB_LIST_NAME = "TabsList";
const TabsListFrame = styled(Group, {
  name: TAB_LIST_NAME,
  focusable: true
});
const TabsList = TabsListFrame.extractable(
  React.forwardRef(
    (props, forwardedRef) => {
      const { __scopeTabs, loop = true, children, ...listProps } = props;
      const context = useTabsContext(TAB_LIST_NAME, __scopeTabs);
      const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeTabs);
      return <RovingFocusGroup
        asChild="except-style"
        orientation={context.orientation}
        dir={context.dir}
        loop={loop}
        {...rovingFocusGroupScope}
      ><TabsListFrame
        role="tablist"
        aria-orientation={context.orientation}
        ref={forwardedRef}
        orientation={context.orientation}
        {...listProps}
      >{children}</TabsListFrame></RovingFocusGroup>;
    }
  )
);
TabsList.displayName = TAB_LIST_NAME;
const TRIGGER_NAME = "TabsTrigger";
const TabsTriggerFrame = styled(ThemeableStack, {
  name: TRIGGER_NAME,
  justifyContent: "center",
  alignItems: "center",
  flexWrap: "nowrap",
  flexDirection: "row",
  cursor: "pointer",
  focusable: true,
  userSelect: "none",
  variants: {
    size: {
      "...size": getButtonSized
    },
    disabled: {
      true: {
        pointerEvents: "none"
      }
    },
    unstyled: {
      false: {
        backgroundColor: "$background",
        pressStyle: {
          backgroundColor: "$backgroundPress"
        },
        hoverStyle: {
          backgroundColor: "$backgroundHover"
        },
        focusStyle: {
          backgroundColor: "$backgroundFocus"
        }
      }
    }
  },
  defaultVariants: {
    unstyled: false
  }
});
const TabsTrigger = TabsTriggerFrame.extractable(
  React.forwardRef(
    (props, forwardedRef) => {
      const {
        __scopeTabs,
        value,
        disabled = false,
        onInteraction,
        ...triggerProps
      } = props;
      const context = useTabsContext(TRIGGER_NAME, __scopeTabs);
      const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeTabs);
      const triggerId = makeTriggerId(context.baseId, value);
      const contentId = makeContentId(context.baseId, value);
      const isSelected = value === context.value;
      const [layout, setLayout] = React.useState(null);
      const triggerRef = React.useRef(null);
      const groupItemProps = useGroupItem({ disabled });
      React.useEffect(() => {
        context.registerTrigger();
        return () => context.unregisterTrigger();
      }, []);
      React.useEffect(() => {
        if (!triggerRef.current || !isWeb)
          return;
        function getTriggerSize() {
          if (!triggerRef.current)
            return;
          setLayout({
            width: triggerRef.current.offsetWidth,
            height: triggerRef.current.offsetHeight,
            x: triggerRef.current.offsetLeft,
            y: triggerRef.current.offsetTop
          });
        }
        getTriggerSize();
        const observer = new ResizeObserver(getTriggerSize);
        observer.observe(triggerRef.current);
        return () => {
          if (!triggerRef.current)
            return;
          observer.unobserve(triggerRef.current);
        };
      }, [context.triggersCount]);
      React.useEffect(() => {
        if (isSelected && layout) {
          onInteraction?.("select", layout);
        }
      }, [isSelected, value, layout]);
      return <Theme name={isSelected ? "active" : null}><RovingFocusGroup.Item
        asChild="except-style"
        {...rovingFocusGroupScope}
        focusable={!disabled}
        active={isSelected}
      ><TabsTriggerFrame
        onLayout={(event) => {
          if (!isWeb) {
            setLayout(event.nativeEvent.layout);
          }
        }}
        onHoverIn={composeEventHandlers(props.onHoverIn, () => {
          if (layout) {
            onInteraction?.("hover", layout);
          }
        })}
        onHoverOut={composeEventHandlers(props.onHoverOut, () => {
          onInteraction?.("hover", null);
        })}
        role="tab"
        aria-selected={isSelected}
        aria-controls={contentId}
        data-state={isSelected ? "active" : "inactive"}
        data-disabled={disabled ? "" : void 0}
        disabled={disabled}
        id={triggerId}
        size={context.size}
        {...groupItemProps}
        {...triggerProps}
        ref={composeRefs(forwardedRef, triggerRef)}
        onPress={composeEventHandlers(props.onPress ?? void 0, (event) => {
          const webChecks = !isWeb || event.button === 0 && event.ctrlKey === false;
          if (!disabled && !isSelected && webChecks) {
            context.onChange(value);
          } else {
            event.preventDefault();
          }
        })}
        {...isWeb && {
          type: "button",
          onKeyDown: composeEventHandlers(
            props.onKeyDown,
            (event) => {
              if ([" ", "Enter"].includes(event.key)) {
                context.onChange(value);
                event.preventDefault();
              }
            }
          ),
          onFocus: composeEventHandlers(props.onFocus, (event) => {
            if (layout) {
              onInteraction?.("focus", layout);
            }
            const isAutomaticActivation = context.activationMode !== "manual";
            if (!isSelected && !disabled && isAutomaticActivation) {
              context.onChange(value);
            }
          }),
          onBlur: composeEventHandlers(props.onFocus, () => {
            onInteraction?.("focus", null);
          })
        }}
      /></RovingFocusGroup.Item></Theme>;
    }
  )
);
TabsTrigger.displayName = TRIGGER_NAME;
const CONTENT_NAME = "TabsContent";
const TabsContentFrame = styled(ThemeableStack, {
  name: CONTENT_NAME
});
const TabsContent = TabsContentFrame.extractable(
  React.forwardRef(
    (props, forwardedRef) => {
      const { __scopeTabs, value, forceMount, children, ...contentProps } = props;
      const context = useTabsContext(CONTENT_NAME, __scopeTabs);
      const isSelected = value === context.value;
      const show = forceMount || isSelected;
      const triggerId = makeTriggerId(context.baseId, value);
      const contentId = makeContentId(context.baseId, value);
      if (!show)
        return null;
      return <TabsContentFrame
        key={value}
        data-state={isSelected ? "active" : "inactive"}
        data-orientation={context.orientation}
        role="tabpanel"
        aria-labelledby={triggerId}
        hidden={!show}
        id={contentId}
        tabIndex={0}
        {...contentProps}
        ref={forwardedRef}
      >{children}</TabsContentFrame>;
    }
  )
);
TabsContent.displayName = CONTENT_NAME;
const TABS_NAME = "Tabs";
const [createTabsContext, createTabsScope] = createContextScope(TABS_NAME, [
  createRovingFocusGroupScope
]);
const useRovingFocusGroupScope = createRovingFocusGroupScope();
const [TabsProvider, useTabsContext] = createTabsContext(TABS_NAME);
const TabsFrame = styled(SizableStack, {
  name: TABS_NAME
});
const Tabs = withStaticProperties(
  TabsFrame.extractable(
    React.forwardRef(
      (props, forwardedRef) => {
        const {
          __scopeTabs,
          value: valueProp,
          onValueChange,
          defaultValue,
          orientation = "horizontal",
          dir,
          activationMode = "automatic",
          size = "$true",
          ...tabsProps
        } = props;
        const direction = useDirection(dir);
        const [value, setValue] = useControllableState({
          prop: valueProp,
          onChange: onValueChange,
          defaultProp: defaultValue ?? ""
        });
        const [triggersCount, setTriggersCount] = React.useState(0);
        const registerTrigger = useEvent(() => setTriggersCount((v) => v + 1));
        const unregisterTrigger = useEvent(() => setTriggersCount((v) => v - 1));
        return <TabsProvider
          scope={__scopeTabs}
          baseId={React.useId()}
          value={value}
          onChange={setValue}
          orientation={orientation}
          dir={direction}
          activationMode={activationMode}
          size={size}
          registerTrigger={registerTrigger}
          triggersCount={triggersCount}
          unregisterTrigger={unregisterTrigger}
        ><TabsFrame
          direction={direction}
          data-orientation={orientation}
          {...tabsProps}
          ref={forwardedRef}
        /></TabsProvider>;
      }
    )
  ),
  {
    List: TabsList,
    /**
     * @deprecated Use Tabs.Tab instead
     */
    Trigger: TabsTrigger,
    Tab: TabsTrigger,
    Content: TabsContent
  }
);
Tabs.displayName = TABS_NAME;
function makeTriggerId(baseId, value) {
  return `${baseId}-trigger-${value}`;
}
function makeContentId(baseId, value) {
  return `${baseId}-content-${value}`;
}
export {
  Tabs
};
//# sourceMappingURL=Tabs.mjs.map
