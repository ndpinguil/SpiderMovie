import * as t from "@babel/types";
function hoistClassNames(path, existing, expr) {
  const hoist = hoistClassNames.bind(null, path, existing);
  if (t.isStringLiteral(expr)) {
    if (expr.value.trim() === "")
      return expr;
    if (existing[expr.value])
      return existing[expr.value];
    const identifier = replaceStringWithVariable(expr);
    return existing[expr.value] = identifier, identifier;
  }
  if (t.isBinaryExpression(expr))
    return t.binaryExpression(expr.operator, hoist(expr.left), hoist(expr.right));
  if (t.isLogicalExpression(expr))
    return t.logicalExpression(expr.operator, hoist(expr.left), hoist(expr.right));
  if (t.isConditionalExpression(expr))
    return t.conditionalExpression(
      expr.test,
      hoist(expr.consequent),
      hoist(expr.alternate)
    );
  return expr;
  function replaceStringWithVariable(str) {
    const uid = path.scope.generateUidIdentifier("cn"), parent = path.findParent((path2) => path2.isProgram());
    if (!parent)
      throw new Error("no program?");
    const variable = t.variableDeclaration("const", [
      // adding a space for extra safety
      t.variableDeclarator(uid, t.stringLiteral(` ${str.value}`))
    ]);
    return parent.unshiftContainer("body", variable), uid;
  }
}
export {
  hoistClassNames
};
//# sourceMappingURL=hoistClassNames.js.map
