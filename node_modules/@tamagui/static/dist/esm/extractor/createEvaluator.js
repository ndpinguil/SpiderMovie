import vm from "vm";
import generate from "@babel/generator";
import * as t from "@babel/types";
import esbuild from "esbuild";
import { FAILED_EVAL } from "../constants";
import { evaluateAstNode } from "./evaluateAstNode";
function createEvaluator({
  props,
  staticNamespace,
  sourcePath,
  traversePath,
  shouldPrintDebug
}) {
  const evalFn = (n) => {
    if (t.isIdentifier(n) && typeof staticNamespace[n.name] < "u")
      return staticNamespace[n.name];
    const evalContext = vm.createContext(staticNamespace), codeWithTypescriptAnnotations = `(${generate(n).code})`, code = esbuild.transformSync(codeWithTypescriptAnnotations, { loader: "tsx" }).code.replace(/;\n$/, "");
    return shouldPrintDebug && console.log("evaluating", code), vm.runInContext(code, evalContext);
  };
  return (n) => evaluateAstNode(n, evalFn);
}
function createSafeEvaluator(attemptEval) {
  return (n) => {
    try {
      return attemptEval(n);
    } catch {
      return FAILED_EVAL;
    }
  };
}
export {
  createEvaluator,
  createSafeEvaluator
};
//# sourceMappingURL=createEvaluator.js.map
