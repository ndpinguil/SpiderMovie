import * as t from "@babel/types";
function getSourceModule(itemName, itemBinding) {
  if (!itemBinding.constant)
    return null;
  let sourceModule, imported, local, destructured, usesImportSyntax = !1;
  const itemNode = itemBinding.path.node;
  if (
    // import x from 'y';
    t.isImportDefaultSpecifier(itemNode) || // import {x} from 'y';
    t.isImportSpecifier(itemNode)
  )
    t.isImportDeclaration(itemBinding.path.parent) && (sourceModule = itemBinding.path.parent.source.value, local = itemNode.local.name, usesImportSyntax = !0, t.isImportSpecifier(itemNode) ? (imported = itemNode.imported.name, destructured = !0) : (imported = itemNode.local.name, destructured = !1));
  else if (t.isVariableDeclarator(itemNode) && itemNode.init != null && t.isCallExpression(itemNode.init) && t.isIdentifier(itemNode.init.callee) && itemNode.init.callee.name === "require" && itemNode.init.arguments.length === 1) {
    const firstArg = itemNode.init.arguments[0];
    if (!t.isStringLiteral(firstArg))
      return null;
    if (sourceModule = firstArg.value, t.isIdentifier(itemNode.id))
      local = itemNode.id.name, imported = itemNode.id.name, destructured = !1;
    else if (t.isObjectPattern(itemNode.id)) {
      for (const objProp of itemNode.id.properties)
        if (t.isObjectProperty(objProp) && t.isIdentifier(objProp.value) && objProp.value.name === itemName) {
          local = objProp.value.name, imported = objProp.key.name, destructured = !0;
          break;
        }
      if (!local || !imported)
        return console.error("could not find prop with value `%s`", itemName), null;
    } else
      return console.error("Unhandled id type: %s", itemNode.id.type), null;
  } else
    return null;
  return {
    destructured,
    imported,
    local,
    sourceModule,
    usesImportSyntax
  };
}
export {
  getSourceModule
};
//# sourceMappingURL=getSourceModule.js.map
