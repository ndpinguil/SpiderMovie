import * as t from "@babel/types";
const hooks = {
  useMedia: !0,
  useTheme: !0
};
function removeUnusedHooks(compFn, shouldPrintDebug) {
  compFn.scope.crawl();
  let bodyStatements = compFn?.get("body");
  if (!bodyStatements) {
    console.log("no body statemnts?", compFn);
    return;
  }
  if (Array.isArray(bodyStatements) || (bodyStatements.isFunctionExpression() ? bodyStatements = bodyStatements.scope.path.get("body") : bodyStatements = bodyStatements.get("body")), !bodyStatements || !Array.isArray(bodyStatements))
    return;
  const statements = bodyStatements;
  for (const statement of statements) {
    if (!statement.isVariableDeclaration())
      continue;
    const declarations = statement.get("declarations");
    if (!Array.isArray(declarations))
      continue;
    const isBindingReferenced = (name) => !!statement.scope.getBinding(name)?.referenced;
    for (const declarator of declarations) {
      const id = declarator.get("id"), init = declarator.node.init;
      if (Array.isArray(id) || Array.isArray(init))
        continue;
      (() => {
        if (!(init && t.isCallExpression(init) && t.isIdentifier(init.callee) && hooks[init.callee.name]))
          return !1;
        if (t.isIdentifier(id.node)) {
          const name = id.node.name;
          return !isBindingReferenced(name);
        } else if (t.isObjectPattern(id.node))
          return id.get("properties").every((prop) => {
            if (!prop.isObjectProperty())
              return !1;
            const value = prop.get("value");
            if (Array.isArray(value) || !value.isIdentifier())
              return !1;
            const name = value.node.name;
            return !isBindingReferenced(name);
          });
        return !1;
      })() && (declarator.remove(), shouldPrintDebug && console.log(`  [\u{1FA9D}] removed ${id.node.name ?? ""}`));
    }
  }
}
export {
  removeUnusedHooks
};
//# sourceMappingURL=removeUnusedHooks.js.map
