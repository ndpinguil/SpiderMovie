import { basename, dirname, extname, join, relative, resolve } from "path";
import { Color, colorLog } from "@tamagui/cli-color";
import { getDefaultTamaguiConfig } from "@tamagui/config-default";
import esbuild from "esbuild";
import { existsSync, pathExists, readJSON, writeFile } from "fs-extra";
import { SHOULD_DEBUG } from "../constants";
import { requireTamaguiCore } from "../helpers/requireTamaguiCore";
import { getNameToPaths, registerRequire } from "../registerRequire";
import {
  TamaguiProjectInfo,
  getBundledConfig,
  hasBundledConfigChanged,
  loadComponents
} from "./bundleConfig";
import {
  generateTamaguiStudioConfig,
  generateTamaguiStudioConfigSync,
  generateTamaguiThemes
} from "./generateTamaguiStudioConfig";
import { getTamaguiConfigPathFromOptionsConfig } from "./getTamaguiConfigPathFromOptionsConfig";
const getFilledOptions = (propsIn) => ({
  // defaults
  platform: "native",
  config: "tamagui.config.ts",
  components: ["tamagui"],
  ...propsIn
});
async function loadTamagui(propsIn) {
  const props = getFilledOptions(propsIn);
  await generateThemesAndLog(props);
  const bundleInfo = await getBundledConfig(props);
  if (!bundleInfo)
    return console.warn(
      "No bundled config generated, maybe an error in bundling. Set DEBUG=tamagui and re-run to get logs."
    ), null;
  if (!hasBundledConfigChanged())
    return bundleInfo;
  if (bundleInfo) {
    const { createTamagui } = requireTamaguiCore(props.platform), config = createTamagui(bundleInfo.tamaguiConfig);
    if (props.outputCSS) {
      colorLog(Color.FgYellow, `    \u27A1 [tamagui] outputCSS: ${props.outputCSS}
`);
      const css = config.getCSS();
      await writeFile(props.outputCSS, css);
    }
  }
  return process.env.NODE_ENV === "development" && await generateTamaguiStudioConfig(props, bundleInfo), bundleInfo;
}
let waiting = !1, hasLoggedOnce = !1;
const generateThemesAndLog = async (options) => {
  if (!waiting && options.themeBuilder)
    try {
      waiting = !0, await new Promise((res) => setTimeout(res, 30));
      const didGenerate = await generateTamaguiThemes(options);
      if (!hasLoggedOnce || didGenerate) {
        hasLoggedOnce = !0;
        const whitespaceBefore = "    ";
        colorLog(Color.FgYellow, `${whitespaceBefore}\u27A1 [tamagui] Generated themes:`), colorLog(
          Color.Dim,
          `
${whitespaceBefore}${relative(process.cwd(), options.themeBuilder.output)}`
        );
      }
    } finally {
      waiting = !1;
    }
}, last = {}, lastVersion = {};
function loadTamaguiSync({
  forceExports,
  cacheKey,
  ...propsIn
}) {
  const key = JSON.stringify(propsIn);
  if (last[key] && !hasBundledConfigChanged() && (!lastVersion[key] || lastVersion[key] === cacheKey))
    return last[key];
  lastVersion[key] = cacheKey || "";
  const props = getFilledOptions(propsIn);
  process.env.IS_STATIC = "is_static", process.env.TAMAGUI_IS_SERVER = "true";
  const { unregister } = registerRequire(props.platform, {
    proxyWormImports: !!forceExports
  });
  try {
    const devValueOG = globalThis.__DEV__;
    globalThis.__DEV__ = process.env.NODE_ENV === "development";
    try {
      let tamaguiConfig = null;
      if (propsIn.config) {
        const configPath = getTamaguiConfigPathFromOptionsConfig(propsIn.config), exp = require(configPath);
        if (tamaguiConfig = exp.default || exp, !tamaguiConfig || !tamaguiConfig.parsed) {
          const confPath = require.resolve(configPath);
          throw new Error(`Can't find valid config in ${confPath}:
          
  Be sure you "export default" the config.`);
        }
        if (tamaguiConfig) {
          const { createTamagui } = requireTamaguiCore(props.platform);
          createTamagui(tamaguiConfig);
        }
      }
      const components = loadComponents(props, forceExports);
      if (!components)
        throw new Error("No components loaded");
      process.env.DEBUG === "tamagui" && console.log("components", components), process.env.IS_STATIC = void 0, globalThis.__DEV__ = devValueOG;
      const info = {
        components,
        tamaguiConfig,
        nameToPaths: getNameToPaths()
      };
      return propsIn.config && generateTamaguiStudioConfigSync(props, info), last[key] = {
        ...info,
        cached: !0
      }, info;
    } catch (err) {
      err instanceof Error ? !SHOULD_DEBUG && !forceExports ? (console.warn(
        "Error loading tamagui.config.ts (set DEBUG=tamagui to see full stack), running tamagui without custom config"
      ), console.log(`

    ${err.message}

`)) : SHOULD_DEBUG && console.error(err) : console.error("Error loading tamagui.config.ts", err);
      const { createTamagui } = requireTamaguiCore(props.platform);
      return {
        components: [],
        tamaguiConfig: createTamagui(getDefaultTamaguiConfig()),
        nameToPaths: {}
      };
    }
  } finally {
    unregister();
  }
}
async function getOptions({
  root = process.cwd(),
  tsconfigPath = "tsconfig.json",
  tamaguiOptions,
  host,
  debug
} = {}) {
  const dotDir = join(root, ".tamagui");
  let pkgJson = {};
  try {
    pkgJson = await readJSON(join(root, "package.json"));
  } catch {
  }
  return {
    mode: process.env.NODE_ENV === "production" ? "production" : "development",
    root,
    host: host || "127.0.0.1",
    pkgJson,
    debug,
    tsconfigPath,
    tamaguiOptions: {
      platform: "native",
      components: ["tamagui"],
      ...tamaguiOptions,
      config: await getDefaultTamaguiConfigPath(root, tamaguiOptions?.config)
    },
    paths: {
      dotDir,
      conf: join(dotDir, "tamagui.config.json"),
      types: join(dotDir, "types.json")
    }
  };
}
function resolveWebOrNativeSpecificEntry(entry) {
  const workspaceRoot = resolve(), resolved = require.resolve(entry, { paths: [workspaceRoot] }), ext = extname(resolved), fileName = basename(resolved).replace(ext, ""), specificExt = "native", specificFile = join(dirname(resolved), fileName + "." + specificExt + ext);
  return existsSync(specificFile) ? specificFile : entry;
}
const defaultPaths = ["tamagui.config.ts", join("src", "tamagui.config.ts")];
let hasWarnedOnce = !1;
async function getDefaultTamaguiConfigPath(root, configPath) {
  const searchPaths = [
    ...new Set(
      [configPath, ...defaultPaths].filter(Boolean).map((p) => join(root, p))
    )
  ];
  for (const path of searchPaths)
    if (await pathExists(path))
      return path;
  hasWarnedOnce || (hasWarnedOnce = !0, console.warn(`Warning: couldn't find tamagui.config.ts in the following paths given configuration "${configPath}":
    ${searchPaths.join(`
  `)}
  `));
}
async function watchTamaguiConfig(tamaguiOptions) {
  const options = await getOptions({ tamaguiOptions });
  if (!options.tamaguiOptions.config)
    throw new Error("No config");
  if (process.env.NODE_ENV === "production")
    return {
      dispose() {
      }
    };
  const disposeConfigWatcher = await esbuildWatchFiles(
    options.tamaguiOptions.config,
    () => {
      generateTamaguiStudioConfig(options.tamaguiOptions, null, !0);
    }
  ), themeBuilderInput = options.tamaguiOptions.themeBuilder?.input;
  let disposeThemesWatcher;
  if (themeBuilderInput) {
    let inputPath = themeBuilderInput;
    try {
      inputPath = require.resolve(themeBuilderInput);
    } catch {
    }
    disposeThemesWatcher = await esbuildWatchFiles(inputPath, () => {
      generateThemesAndLog(options.tamaguiOptions);
    });
  }
  return {
    dispose() {
      disposeConfigWatcher(), disposeThemesWatcher?.();
    }
  };
}
async function esbuildWatchFiles(entry, onChanged) {
  let hasRunOnce = !1;
  const context = await esbuild.context({
    bundle: !0,
    entryPoints: [entry],
    resolveExtensions: [".ts", ".tsx", ".js", ".jsx", ".mjs"],
    logLevel: "silent",
    write: !1,
    plugins: [
      {
        name: "on-rebuild",
        setup({ onEnd }) {
          onEnd(() => {
            hasRunOnce ? onChanged() : hasRunOnce = !0;
          });
        }
      }
    ]
  });
  return context.watch(), () => {
    context.dispose();
  };
}
export {
  TamaguiProjectInfo,
  getOptions,
  loadTamagui,
  loadTamaguiSync,
  resolveWebOrNativeSpecificEntry,
  watchTamaguiConfig
};
//# sourceMappingURL=loadTamagui.js.map
