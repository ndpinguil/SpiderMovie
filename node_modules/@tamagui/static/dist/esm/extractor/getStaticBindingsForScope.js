import { fork } from "child_process";
import { dirname, extname, join, resolve } from "path";
import * as t from "@babel/types";
import { evaluateAstNode } from "./evaluateAstNode";
import { getSourceModule } from "./getSourceModule";
const isLocalImport = (path) => path.startsWith(".") || path.startsWith("/");
function resolveImportPath(sourcePath, path) {
  const sourceDir = dirname(sourcePath);
  return isLocalImport(path) ? (extname(path) === "" && (path += ".js"), resolve(sourceDir, path)) : path;
}
const cache = /* @__PURE__ */ new Map(), pending = /* @__PURE__ */ new Map(), loadCmd = `${join(__dirname, "loadFile.js")}`;
let exited = !1, child = null;
function forkChild() {
  child = fork(loadCmd, [], {
    execArgv: ["-r", "esbuild-register"],
    detached: !1,
    stdio: "ignore"
  });
}
function cleanupBeforeExit() {
  exited || child && (child.removeAllListeners(), child.unref(), child.disconnect(), child.kill(), exited = !0);
}
process.once("SIGTERM", cleanupBeforeExit);
process.once("SIGINT", cleanupBeforeExit);
process.once("beforeExit", cleanupBeforeExit);
function importModule(path) {
  if (child || forkChild(), pending.has(path))
    return pending.get(path);
  const promise = new Promise((res, rej) => {
    if (!child)
      return;
    if (cache.size > 2e3 && cache.clear(), cache.has(path))
      return cache.get(path);
    const listener = (msg) => {
      if (!child || !msg || typeof msg != "string")
        return;
      if (msg[0] === "-") {
        rej(new Error(msg.slice(1)));
        return;
      }
      child.removeListener("message", listener);
      const val = JSON.parse(msg);
      cache.set(path, val), res(val);
    };
    child.once("message", listener), child.send(`${path.replace(".js", "")}`);
  });
  return pending.set(path, promise), promise;
}
async function getStaticBindingsForScope(scope, whitelist = [], sourcePath, bindingCache, shouldPrintDebug) {
  const bindings = scope.getAllBindings(), ret = {}, program = scope.getProgramParent().block;
  for (const node of program.body)
    if (t.isImportDeclaration(node)) {
      const importPath = node.source.value;
      if (!node.specifiers.length || !isLocalImport(importPath))
        continue;
      const moduleName = resolveImportPath(sourcePath, importPath);
      if (!whitelist.some((test) => moduleName.endsWith(test)))
        continue;
      try {
        const src = await importModule(moduleName);
        if (!src)
          continue;
        for (const specifier of node.specifiers)
          if (t.isImportSpecifier(specifier) && t.isIdentifier(specifier.imported) && typeof src[specifier.imported.name] < "u") {
            const val = src[specifier.local.name];
            ret[specifier.local.name] = val;
          }
      } catch (err) {
        shouldPrintDebug ? console.warn(
          `    | Skipping partial evaluation of constant file: ${moduleName} (DEBUG=tamagui for more)`
        ) : process.env.DEBUG?.startsWith("tamagui") && console.log("Error in partial evaluation", err.message, err.stack);
      }
    }
  if (!bindingCache)
    throw new Error("BindingCache is a required param");
  for (const k in bindings) {
    const binding = bindings[k], sourceModule = getSourceModule(k, binding);
    if (sourceModule) {
      if (!sourceModule.sourceModule)
        continue;
      const moduleName = resolveImportPath(sourcePath, sourceModule.sourceModule);
      if (whitelist.some((test) => moduleName.endsWith(test))) {
        const src = importModule(moduleName);
        if (!src)
          return console.log(
            `    | \u26A0\uFE0F Missing file ${moduleName} via ${sourcePath} import ${sourceModule.sourceModule}?`
          ), {};
        sourceModule.destructured ? sourceModule.imported && (ret[k] = src[sourceModule.imported]) : ret[k] = src;
      }
      continue;
    }
    const { parent } = binding.path;
    if (!t.isVariableDeclaration(parent) || parent.kind !== "const")
      continue;
    const dec = parent.declarations.find((d) => t.isIdentifier(d.id) && d.id.name === k);
    if (!dec || !dec.init)
      continue;
    if (typeof dec.id.start != "number" || typeof dec.id.end != "number") {
      console.error("dec.id.start/end is not a number");
      continue;
    }
    if (!t.isIdentifier(dec.id)) {
      console.error("dec is not an identifier");
      continue;
    }
    const cacheKey = `${dec.id.name}_${dec.id.start}-${dec.id.end}`;
    if (Object.hasOwnProperty.call(bindingCache, cacheKey)) {
      ret[k] = bindingCache[cacheKey];
      continue;
    }
    if (Object.hasOwnProperty.call(bindingCache, cacheKey)) {
      ret[k] = bindingCache[cacheKey];
      continue;
    }
    try {
      ret[k] = evaluateAstNode(dec.init, void 0, shouldPrintDebug), bindingCache[cacheKey] = ret[k];
      continue;
    } catch {
    }
  }
  return ret;
}
export {
  cleanupBeforeExit,
  getStaticBindingsForScope
};
//# sourceMappingURL=getStaticBindingsForScope.js.map
