import { basename, dirname, join } from "path";
import esbuild from "esbuild";
import { pathExists, stat, writeFile } from "fs-extra";
import { esbuildAliasPlugin } from "./esbuildAliasPlugin";
import { resolveWebOrNativeSpecificEntry } from "./loadTamagui";
function getESBuildConfig({ entryPoints, resolvePlatformSpecificEntries, ...options }, platform, aliases) {
  process.env.DEBUG?.startsWith("tamagui") && console.log("Building", entryPoints);
  const tsconfig = join(__dirname, "..", "..", "..", "tamagui.tsconfig.json");
  return {
    bundle: !0,
    entryPoints: resolvePlatformSpecificEntries ? entryPoints.map(resolveWebOrNativeSpecificEntry) : entryPoints,
    format: "cjs",
    target: "node16",
    jsx: "transform",
    jsxFactory: "react",
    allowOverwrite: !0,
    keepNames: !0,
    resolveExtensions: [
      ".web.tsx",
      ".web.ts",
      ".web.jsx",
      ".web.js",
      ".tsx",
      ".ts",
      ".jsx",
      ".js"
    ],
    platform: "node",
    tsconfig,
    loader: {
      ".js": "jsx",
      ".png": "dataurl",
      ".jpg": "dataurl",
      ".jpeg": "dataurl",
      ".svg": "dataurl",
      ".gif": "dataurl",
      ".webp": "dataurl",
      ".woff2": "dataurl",
      ".woff": "dataurl",
      ".eot": "dataurl",
      ".otf": "dataurl",
      ".ttf": "dataurl"
    },
    logLevel: "warning",
    plugins: [
      {
        name: "external",
        setup(build) {
          build.onResolve({ filter: /@tamagui\/core/ }, (args) => ({
            path: platform === "native" ? "@tamagui/core/native" : "@tamagui/core",
            external: !0
          })), build.onResolve({ filter: /react-native\/package.json$/ }, (args) => ({
            path: "react-native/package.json",
            external: !0
          })), build.onResolve({ filter: /@tamagui\/web/ }, (args) => ({
            path: platform === "native" ? "@tamagui/core/native" : "@tamagui/core",
            external: !0
          })), build.onResolve({ filter: /^(react-native|react-native\/.*)$/ }, (args) => ({
            path: "react-native-web-lite",
            external: !0
          }));
        }
      },
      esbuildAliasPlugin({
        ...aliases
      })
    ],
    ...options
  };
}
async function bundle(props, platform, aliases) {
  await asyncLock(props);
  const config = getESBuildConfig(props, platform, aliases);
  return esbuild.build(config);
}
async function asyncLock(props) {
  const lockFile = join(dirname(props.outfile), basename(props.outfile, ".lock")), lockStat = await stat(lockFile).catch(() => {
  });
  if ((lockStat ? (/* @__PURE__ */ new Date()).getTime() - new Date(lockStat.mtime).getTime() : 1 / 0) < 500) {
    process.env.DEBUG?.startsWith("tamagui") && console.log("Waiting for existing build", props.entryPoints);
    let tries = 5;
    for (; tries--; ) {
      if (await pathExists(props.outfile))
        return;
      await new Promise((res) => setTimeout(res, 50));
    }
  }
  writeFile(lockFile, "");
}
export {
  bundle
};
//# sourceMappingURL=bundle.js.map
