import generate from "@babel/generator";
import * as t from "@babel/types";
import invariant from "invariant";
function normalizeTernaries(ternaries) {
  if (invariant(
    Array.isArray(ternaries),
    "extractStaticTernaries expects param 1 to be an array of ternaries"
  ), ternaries.length === 0)
    return [];
  const ternariesByKey = {};
  for (let idx = -1, len = ternaries.length; ++idx < len; ) {
    const { test, consequent, alternate, remove, ...rest } = ternaries[idx];
    let ternaryTest = test;
    t.isExpressionStatement(test) && (ternaryTest = test.expression);
    let shouldSwap = !1;
    t.isUnaryExpression(test) && test.operator === "!" ? (ternaryTest = test.argument, shouldSwap = !0) : t.isBinaryExpression(test) && (test.operator === "!==" || test.operator === "!=") && (ternaryTest = t.binaryExpression(
      test.operator.replace("!", "="),
      test.left,
      test.right
    ), shouldSwap = !0);
    const key = generate(ternaryTest).code;
    ternariesByKey[key] || (ternariesByKey[key] = {
      ...rest,
      alternate: {},
      consequent: {},
      test: ternaryTest,
      remove
    });
    const altStyle = (shouldSwap ? consequent : alternate) ?? {}, consStyle = (shouldSwap ? alternate : consequent) ?? {};
    Object.assign(ternariesByKey[key].alternate, altStyle), Object.assign(ternariesByKey[key].consequent, consStyle);
  }
  return Object.keys(ternariesByKey).map((key) => ternariesByKey[key]);
}
export {
  normalizeTernaries
};
//# sourceMappingURL=normalizeTernaries.js.map
