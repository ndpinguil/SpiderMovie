import { register } from "esbuild-register/dist/node";
import { requireTamaguiCore } from "./helpers/requireTamaguiCore";
const nameToPaths = {}, Module = require("module"), getNameToPaths = () => nameToPaths, proxyWorm = require("@tamagui/proxy-worm"), rnw = require("react-native-web");
let isRegistered = !1, og;
const whitelisted = {
  react: !0
}, compiled = {};
function setRequireResult(name, result) {
  compiled[name] = result;
}
function registerRequire(platform, { proxyWormImports } = {
  proxyWormImports: !1
}) {
  if (isRegistered)
    return {
      tamaguiRequire: require,
      unregister: () => {
      }
    };
  const { unregister } = register({
    hookIgnoreNodeModules: !1
  });
  og || (og = Module.prototype.require), isRegistered = !0, Module.prototype.require = tamaguiRequire;
  function tamaguiRequire(path) {
    if (path === "tamagui")
      return og.apply(this, ["tamagui/native"]);
    if (path === "@tamagui/core" || path === "@tamagui/web")
      return requireTamaguiCore(platform, (path2) => og.apply(this, [path2]));
    if (path in compiled)
      return compiled[path];
    if (/\.(gif|jpe?g|png|svg|ttf|otf|woff2?|bmp|webp)$/i.test(path))
      return {};
    if (path === "@gorhom/bottom-sheet" || path.startsWith("react-native-reanimated") || path === "expo-linear-gradient" || path === "@expo/vector-icons" || path === "tamagui/linear-gradient" || path === "react-native-svg")
      return proxyWorm;
    if (path === "react-native/package.json")
      return packageJson;
    if (path === "react-native-web-lite" || path.startsWith("react-native"))
      return rnw;
    if (path in knownIgnorableModules)
      return proxyWorm;
    if (!whitelisted[path] && proxyWormImports && !path.includes(".tamagui-dynamic-eval"))
      return path === "tamagui" ? og.apply(this, [path]) : proxyWorm;
    try {
      return og.apply(this, arguments);
    } catch (err) {
      return !process.env.TAMAGUI_ENABLE_WARN_DYNAMIC_LOAD && path.includes("tamagui-dynamic-eval") ? void 0 : (allowedIgnores[path] || IGNORES === "true" || (process.env.TAMAGUI_SHOW_FULL_BUNDLE_ERRORS ? console.error(
        `Tamagui failed loading "${path}"
  
  ${err.message}
  ${err.stack}

  `
      ) : hasWarnedForModules.has(path) || (hasWarnedForModules.add(path), console.log(
        `
\u26A0\uFE0F Tamagui Warning [001]: Skipping loading ${path} due to error bundling.
   - message: ${err.message}
   - for more info see: https://tamagui.dev/docs/intro/errors#warning-001
   - set TAMAGUI_SHOW_FULL_BUNDLE_ERRORS=1 to see stack trace

`
      ))), proxyWorm);
    }
  }
  return {
    tamaguiRequire,
    unregister: () => {
      unregister(), isRegistered = !1, Module.prototype.require = og;
    }
  };
}
const packageJson = require("react-native-web/package.json"), IGNORES = process.env.TAMAGUI_IGNORE_BUNDLE_ERRORS, extraIgnores = IGNORES === "true" ? [] : process.env.TAMAGUI_IGNORE_BUNDLE_ERRORS?.split(","), knownIgnorableModules = {
  "expo-modules": !0,
  solito: !0,
  ...Object.fromEntries(extraIgnores?.map((k) => [k, !0]) || [])
}, hasWarnedForModules = /* @__PURE__ */ new Set(), allowedIgnores = {
  "expo-constants": !0
};
export {
  getNameToPaths,
  registerRequire,
  setRequireResult
};
//# sourceMappingURL=registerRequire.js.map
