var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var bundleConfig_exports = {};
__export(bundleConfig_exports, {
  bundleConfig: () => bundleConfig,
  esbuildOptions: () => esbuildOptions,
  getBundledConfig: () => getBundledConfig,
  hasBundledConfigChanged: () => hasBundledConfigChanged,
  loadComponents: () => loadComponents
});
module.exports = __toCommonJS(bundleConfig_exports);
var import_fs = require("fs"), import_path = require("path"), import_generator = __toESM(require("@babel/generator")), import_traverse = __toESM(require("@babel/traverse")), t = __toESM(require("@babel/types")), import_cli_color = require("@tamagui/cli-color"), import_esbuild = __toESM(require("esbuild")), import_fs_extra = require("fs-extra"), import_registerRequire = require("../registerRequire"), import_babelParse = require("./babelParse"), import_bundle = require("./bundle"), import_getTamaguiConfigPathFromOptionsConfig = require("./getTamaguiConfigPathFromOptionsConfig");
const external = [
  "@tamagui/core",
  "@tamagui/web",
  "react",
  "react-dom",
  "react-native-svg"
], esbuildExtraOptions = {
  define: {
    __DEV__: `${process.env.NODE_ENV === "development"}`
  }
}, esbuildOptions = {
  target: "es2018",
  format: "cjs",
  jsx: "transform",
  platform: "node",
  ...esbuildExtraOptions
};
let currentBundle = null, isBundling = !1, lastBundle = null;
const waitForBundle = /* @__PURE__ */ new Set();
function hasBundledConfigChanged() {
  return lastBundle === currentBundle ? !1 : (lastBundle = currentBundle, !0);
}
async function getBundledConfig(props, rebuild = !1) {
  if (isBundling)
    await new Promise((res) => {
      waitForBundle.add(res);
    });
  else if (!currentBundle || rebuild)
    return await bundleConfig(props);
  return currentBundle;
}
async function bundleConfig(props) {
  var _a, _b, _c, _d;
  try {
    isBundling = !0;
    const configEntry = props.config ? (0, import_getTamaguiConfigPathFromOptionsConfig.getTamaguiConfigPathFromOptionsConfig)(props.config) : "", tmpDir = (0, import_path.join)(process.cwd(), ".tamagui"), configOutPath = (0, import_path.join)(tmpDir, "tamagui.config.cjs"), baseComponents = props.components.filter((x) => x !== "@tamagui/core"), componentOutPaths = baseComponents.map(
      (componentModule) => (0, import_path.join)(
        tmpDir,
        `${componentModule.split(import_path.sep).join("-").replace(/[^a-z0-9]+/gi, "")}-components.config.cjs`
      )
    );
    process.env.NODE_ENV === "development" && ((_a = process.env.DEBUG) != null && _a.startsWith("tamagui")) && console.log("Building config entry", configEntry);
    try {
      await (0, import_fs_extra.ensureDir)(tmpDir);
    } catch {
    }
    const start = Date.now();
    await Promise.all([
      props.config ? (0, import_bundle.bundle)(
        {
          entryPoints: [configEntry],
          external,
          outfile: configOutPath,
          target: "node16",
          ...esbuildExtraOptions
        },
        props.platform
      ) : null,
      ...baseComponents.map((componentModule, i) => (0, import_bundle.bundle)(
        {
          entryPoints: [componentModule],
          resolvePlatformSpecificEntries: !0,
          external,
          outfile: componentOutPaths[i],
          target: "node16",
          ...esbuildExtraOptions
        },
        props.platform
      ))
    ]), (0, import_cli_color.colorLog)(
      import_cli_color.Color.FgYellow,
      `
    \u27A1 [tamagui] (${Date.now() - start}ms):`
    ), (0, import_cli_color.colorLog)(
      import_cli_color.Color.Dim,
      `
        Config     .${import_path.sep}${(0, import_path.relative)(process.cwd(), configOutPath)}
        Components ${[
        ...componentOutPaths.map((p) => `.${import_path.sep}${(0, import_path.relative)(process.cwd(), p)}`)
      ].join(`
             `)}
        `
    );
    let out;
    const { unregister } = (0, import_registerRequire.registerRequire)(props.platform);
    try {
      out = require(configOutPath);
    } catch (err) {
      throw err;
    } finally {
      unregister();
    }
    let config = out.default || out || out.config;
    if (config && config.config && !config.tokens && (config = config.config), !config)
      throw new Error(`No config: ${config}`);
    let components = loadComponents({
      ...props,
      components: componentOutPaths
    });
    if (!components)
      throw new Error(`No components found: ${componentOutPaths.join(", ")}`);
    for (const component of components)
      component.moduleName = baseComponents[componentOutPaths.indexOf(component.moduleName)], component.moduleName || ((_b = process.env.DEBUG) != null && _b.includes("tamagui") || process.env.IS_TAMAGUI_DEV) && console.warn(
        `\u26A0\uFE0F no module name found: ${component.moduleName} ${JSON.stringify(
          baseComponents
        )} in ${JSON.stringify(componentOutPaths)}`
      );
    const coreComponents = loadComponents({
      ...props,
      components: ["@tamagui/core"]
    });
    coreComponents && (coreComponents[0].moduleName = "@tamagui/core", components = [...components, ...coreComponents]), process.env.NODE_ENV === "development" && ((_c = process.env.DEBUG) != null && _c.startsWith("tamagui")) && console.log("Loaded components", components);
    const res = {
      components,
      nameToPaths: {},
      tamaguiConfig: config
    };
    return currentBundle = res, res;
  } catch (err) {
    console.error(
      `Error bundling tamagui config: ${err == null ? void 0 : err.message} (run with DEBUG=tamagui to see stack)`
    ), (_d = process.env.DEBUG) != null && _d.includes("tamagui") && console.error(err.stack);
  } finally {
    isBundling = !1, waitForBundle.forEach((cb) => cb()), waitForBundle.clear();
  }
}
function loadComponents(props, forceExports = !1) {
  const componentsModules = props.components, key = componentsModules.join("");
  if (!forceExports && cacheComponents[key])
    return cacheComponents[key];
  const { unregister } = (0, import_registerRequire.registerRequire)(props.platform, {
    proxyWormImports: forceExports
  });
  try {
    const info = componentsModules.flatMap((name) => {
      var _a;
      const isDynamic = !!(0, import_path.extname)(name) && forceExports, fileContents = isDynamic ? (0, import_fs.readFileSync)(name, "utf-8") : "", loadModule = isDynamic ? (0, import_path.join)((0, import_path.dirname)(name), `.tamagui-dynamic-eval-${(0, import_path.basename)(name)}.tsx`) : name;
      let writtenContents = fileContents, didBabel = !1;
      function attemptLoad({ forceExports: forceExports2 = !1 } = {}) {
        isDynamic && (writtenContents = forceExports2 ? transformAddExports((0, import_babelParse.babelParse)(esbuildit(fileContents, "modern"), name)) : fileContents, (0, import_fs_extra.writeFileSync)(loadModule, writtenContents), import_esbuild.default.buildSync({
          ...esbuildOptions,
          entryPoints: [loadModule],
          outfile: loadModule,
          alias: {
            "react-native": require.resolve("@tamagui/react-native-prebuilt")
          },
          bundle: !0,
          packages: "external",
          allowOverwrite: !0,
          // logLevel: 'silent',
          sourcemap: !1,
          loader: {
            ".png": "dataurl",
            ".jpg": "dataurl",
            ".jpeg": "dataurl",
            ".gif": "dataurl"
          }
        })), process.env.DEBUG === "tamagui" && console.log("loadModule", loadModule, require.resolve(loadModule));
        const moduleResult = require(loadModule);
        forceExports2 || (0, import_registerRequire.setRequireResult)(name, moduleResult);
        const nameToInfo = getComponentStaticConfigByName(
          name,
          interopDefaultExport(moduleResult)
        );
        return {
          moduleName: name,
          nameToInfo
        };
      }
      const dispose = () => {
        isDynamic && (0, import_fs_extra.removeSync)(loadModule);
      };
      try {
        const res = attemptLoad({
          forceExports: !0
        });
        return didBabel = !0, res;
      } catch (err) {
        console.log("babel err", err, writtenContents), writtenContents = fileContents, (_a = process.env.DEBUG) != null && _a.startsWith("tamagui") && console.log("Error parsing babel likely", err);
      } finally {
        dispose();
      }
      try {
        return attemptLoad({
          forceExports: !1
        });
      } catch (err) {
        return process.env.TAMAGUI_ENABLE_WARN_DYNAMIC_LOAD && (console.log(`

Tamagui attempted but failed to dynamically optimize components in:
  ${name}
`), console.log(err), console.log(
          `At: ${loadModule}`,
          `
didBabel: ${didBabel}`,
          `
In:`,
          writtenContents,
          `
isDynamic: `,
          isDynamic
        )), [];
      } finally {
        dispose();
      }
    });
    return cacheComponents[key] = info, info;
  } catch (err) {
    return console.log("Tamagui error bundling components", err.message, err.stack), null;
  } finally {
    unregister();
  }
}
const esbuildit = (src, target) => import_esbuild.default.transformSync(src, {
  ...esbuildOptions,
  ...target === "modern" && {
    target: "es2022",
    jsx: "transform",
    loader: "tsx",
    platform: "neutral",
    format: "esm"
  }
}).code;
function getComponentStaticConfigByName(name, exported) {
  const components = {};
  try {
    if (!exported || typeof exported != "object" || Array.isArray(exported))
      throw new Error(`Invalid export from package ${name}: ${typeof exported}`);
    for (const key in exported) {
      const found = getTamaguiComponent(key, exported[key]);
      if (found) {
        const { Component, ...sc } = found.staticConfig;
        components[key] = { staticConfig: sc };
      }
    }
  } catch (err) {
    process.env.TAMAGUI_ENABLE_WARN_DYNAMIC_LOAD && (console.error(
      `Tamagui failed getting components from ${name} (Disable error by setting environment variable TAMAGUI_ENABLE_WARN_DYNAMIC_LOAD=1)`
    ), console.error(err));
  }
  return components;
}
function getTamaguiComponent(name, Component) {
  if (name[0].toUpperCase() !== name[0])
    return;
  if (Component == null ? void 0 : Component.staticConfig)
    return Component;
}
function interopDefaultExport(mod) {
  return (mod == null ? void 0 : mod.default) ?? mod;
}
const cacheComponents = {};
function transformAddExports(ast) {
  const usedNames = /* @__PURE__ */ new Set();
  return (0, import_traverse.default)(ast, {
    ExportNamedDeclaration(nodePath) {
      if (nodePath.node.specifiers)
        for (const spec of nodePath.node.specifiers)
          usedNames.add(
            t.isIdentifier(spec.exported) ? spec.exported.name : spec.exported.value
          );
    }
  }), (0, import_traverse.default)(ast, {
    VariableDeclaration(nodePath) {
      if (!t.isProgram(nodePath.parent))
        return;
      const decs = nodePath.node.declarations;
      if (decs.length > 1)
        return;
      const [dec] = decs;
      t.isIdentifier(dec.id) && dec.init && (usedNames.has(dec.id.name) || (usedNames.add(dec.id.name), nodePath.replaceWith(
        t.exportNamedDeclaration(t.variableDeclaration("let", [dec]), [
          t.exportSpecifier(t.identifier(dec.id.name), t.identifier(dec.id.name))
        ])
      )));
    }
  }), (0, import_generator.default)(ast, {
    concise: !1,
    filename: "test.tsx",
    retainLines: !1,
    sourceMaps: !1
  }).code;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  bundleConfig,
  esbuildOptions,
  getBundledConfig,
  hasBundledConfigChanged,
  loadComponents
});
//# sourceMappingURL=bundleConfig.js.map
