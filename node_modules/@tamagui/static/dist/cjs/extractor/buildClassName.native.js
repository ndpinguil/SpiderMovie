"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var buildClassName_exports = {};
__export(buildClassName_exports, {
  buildClassName: () => buildClassName,
  buildClassNameLogic: () => buildClassNameLogic
});
module.exports = __toCommonJS(buildClassName_exports);
var t = __toESM(require("@babel/types"));
const buildClassName = (objectsIn, extras = "") => {
  let objects = buildClassNameLogic(objectsIn);
  return objects ? (t.isStringLiteral(objects) ? objects.value = `${extras} ${objects.value}` : objects = t.binaryExpression("+", t.stringLiteral(extras), objects), objects) : null;
}, buildClassNameLogic = (objects) => objects.reduce((acc, val) => {
  if (acc == null)
    return (
      // pass conditional expressions through
      t.isConditionalExpression(val) || // pass non-null literals through
      t.isStringLiteral(val) || t.isNumericLiteral(val) ? val : t.logicalExpression("||", val, t.stringLiteral(""))
    );
  let inner;
  if (t.isStringLiteral(val)) {
    if (t.isStringLiteral(acc))
      return t.stringLiteral(`${acc.value} ${val.value}`);
    inner = t.stringLiteral(` ${val.value}`);
  } else if (t.isLiteral(val))
    inner = t.binaryExpression("+", t.stringLiteral(" "), val);
  else if (t.isConditionalExpression(val) || t.isBinaryExpression(val)) {
    if (t.isStringLiteral(acc))
      return t.binaryExpression("+", t.stringLiteral(`${acc.value} `), val);
    inner = t.binaryExpression("+", t.stringLiteral(" "), val);
  } else if (t.isIdentifier(val) || t.isMemberExpression(val))
    inner = t.conditionalExpression(
      val,
      t.binaryExpression("+", t.stringLiteral(" "), val),
      t.stringLiteral("")
    );
  else {
    if (t.isStringLiteral(acc))
      return t.binaryExpression(
        "+",
        t.stringLiteral(`${acc.value} `),
        t.logicalExpression("||", val, t.stringLiteral(""))
      );
    inner = t.binaryExpression(
      "+",
      t.stringLiteral(" "),
      t.logicalExpression("||", val, t.stringLiteral(""))
    );
  }
  return t.binaryExpression("+", acc, inner);
}, null);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  buildClassName,
  buildClassNameLogic
});
//# sourceMappingURL=buildClassName.js.map
