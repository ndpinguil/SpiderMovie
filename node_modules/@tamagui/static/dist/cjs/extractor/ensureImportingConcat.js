var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var ensureImportingConcat_exports = {};
__export(ensureImportingConcat_exports, {
  ensureImportingConcat: () => ensureImportingConcat
});
module.exports = __toCommonJS(ensureImportingConcat_exports);
var t = __toESM(require("@babel/types"));
const importConcatPkg = "@tamagui/helpers";
function ensureImportingConcat(path) {
  const imported = path.get("body").find(
    (x) => x.isImportDeclaration() && x.node.source.value === importConcatPkg
  ), importSpecifier = t.importSpecifier(
    t.identifier("concatClassName"),
    t.identifier("concatClassName")
  );
  if (!imported) {
    path.node.body.push(
      t.importDeclaration([importSpecifier], t.stringLiteral(importConcatPkg))
    );
    return;
  }
  const specifiers = imported.node.specifiers;
  specifiers.some(
    (x) => t.isImportSpecifier(x) && t.isIdentifier(x.imported) && x.imported.name === "concatClassName"
  ) || specifiers.push(
    t.importSpecifier(t.identifier("concatClassName"), t.identifier("concatClassName"))
  );
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ensureImportingConcat
});
//# sourceMappingURL=ensureImportingConcat.js.map
