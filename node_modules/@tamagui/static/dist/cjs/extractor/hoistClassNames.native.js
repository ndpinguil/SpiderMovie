"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var hoistClassNames_exports = {};
__export(hoistClassNames_exports, {
  hoistClassNames: () => hoistClassNames
});
module.exports = __toCommonJS(hoistClassNames_exports);
var t = __toESM(require("@babel/types"));
function hoistClassNames(path, existing, expr) {
  const hoist = hoistClassNames.bind(null, path, existing);
  if (t.isStringLiteral(expr)) {
    if (expr.value.trim() === "")
      return expr;
    if (existing[expr.value])
      return existing[expr.value];
    const identifier = replaceStringWithVariable(expr);
    return existing[expr.value] = identifier, identifier;
  }
  if (t.isBinaryExpression(expr))
    return t.binaryExpression(expr.operator, hoist(expr.left), hoist(expr.right));
  if (t.isLogicalExpression(expr))
    return t.logicalExpression(expr.operator, hoist(expr.left), hoist(expr.right));
  if (t.isConditionalExpression(expr))
    return t.conditionalExpression(
      expr.test,
      hoist(expr.consequent),
      hoist(expr.alternate)
    );
  return expr;
  function replaceStringWithVariable(str) {
    const uid = path.scope.generateUidIdentifier("cn"), parent = path.findParent((path2) => path2.isProgram());
    if (!parent)
      throw new Error("no program?");
    const variable = t.variableDeclaration("const", [
      // adding a space for extra safety
      t.variableDeclarator(uid, t.stringLiteral(` ${str.value}`))
    ]);
    return parent.unshiftContainer("body", variable), uid;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  hoistClassNames
});
//# sourceMappingURL=hoistClassNames.js.map
