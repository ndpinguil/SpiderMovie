var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var getPropValueFromAttributes_exports = {};
__export(getPropValueFromAttributes_exports, {
  getPropValueFromAttributes: () => getPropValueFromAttributes
});
module.exports = __toCommonJS(getPropValueFromAttributes_exports);
var import_generator = __toESM(require("@babel/generator")), t = __toESM(require("@babel/types")), import_accessSafe = require("./accessSafe");
function getPropValueFromAttributes(propName, attrs) {
  let propIndex = -1, jsxAttr = null;
  for (let idx = -1, len = attrs.length; ++idx < len; ) {
    const attr = attrs[idx];
    if (t.isJSXAttribute(attr) && attr.name && attr.name.name === propName) {
      propIndex = idx, jsxAttr = attr;
      break;
    }
  }
  if (!jsxAttr || jsxAttr.value == null)
    return null;
  let propValue = jsxAttr.value;
  if (t.isJSXExpressionContainer(propValue) && (propValue = propValue.expression), t.isJSXEmptyExpression(propValue))
    return console.error("encountered JSXEmptyExpression"), null;
  const applicableSpreads = attrs.filter(
    // 1. idx is greater than propValue prop index
    // 2. attr is a spread operator
    (attr, idx) => {
      if (t.isJSXSpreadAttribute(attr)) {
        if (t.isIdentifier(attr.argument) || t.isMemberExpression(attr.argument))
          return idx > propIndex;
        if (t.isLogicalExpression(attr.argument))
          return !1;
        throw new Error(
          `unsupported spread of type "${attr.argument.type}": ${// @ts-ignore
          (0, import_generator.default)(attr).code}`
        );
      }
      return !1;
    }
  ).map((attr) => attr.argument);
  return applicableSpreads.length > 0 && (propValue = applicableSpreads.reduce(
    (acc, val) => t.logicalExpression("||", (0, import_accessSafe.accessSafe)(val, propName), acc),
    propValue
  )), propValue;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getPropValueFromAttributes
});
//# sourceMappingURL=getPropValueFromAttributes.js.map
