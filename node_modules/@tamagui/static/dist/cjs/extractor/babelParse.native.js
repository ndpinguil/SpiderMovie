"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var babelParse_exports = {};
__export(babelParse_exports, {
  babelParse: () => babelParse,
  parserOptions: () => parserOptions
});
module.exports = __toCommonJS(babelParse_exports);
var babelParser = __toESM(require("@babel/parser"));
const plugins = [
  "asyncGenerators",
  "classProperties",
  "dynamicImport",
  "functionBind",
  "jsx",
  "numericSeparator",
  "objectRestSpread",
  "optionalCatchBinding",
  "decorators-legacy",
  "typescript",
  "optionalChaining",
  "nullishCoalescingOperator"
], parserOptions = Object.freeze({
  plugins,
  sourceType: "module"
}), parser = babelParser.parse.bind(babelParser);
function babelParse(code, fileName) {
  const codeString = code.toString();
  try {
    return parser(codeString, parserOptions);
  } catch (err) {
    throw new Error(
      `Error parsing babel: ${err} in ${fileName}, code:
${codeString}
 ${err.stack}`
    );
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  babelParse,
  parserOptions
});
//# sourceMappingURL=babelParse.js.map
