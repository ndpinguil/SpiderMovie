var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var bundle_exports = {};
__export(bundle_exports, {
  bundle: () => bundle
});
module.exports = __toCommonJS(bundle_exports);
var import_path = require("path"), import_esbuild = __toESM(require("esbuild")), import_fs_extra = require("fs-extra"), import_esbuildAliasPlugin = require("./esbuildAliasPlugin"), import_loadTamagui = require("./loadTamagui");
function getESBuildConfig({ entryPoints, resolvePlatformSpecificEntries, ...options }, platform, aliases) {
  var _a;
  (_a = process.env.DEBUG) != null && _a.startsWith("tamagui") && console.log("Building", entryPoints);
  const tsconfig = (0, import_path.join)(__dirname, "..", "..", "..", "tamagui.tsconfig.json");
  return {
    bundle: !0,
    entryPoints: resolvePlatformSpecificEntries ? entryPoints.map(import_loadTamagui.resolveWebOrNativeSpecificEntry) : entryPoints,
    format: "cjs",
    target: "node16",
    jsx: "transform",
    jsxFactory: "react",
    allowOverwrite: !0,
    keepNames: !0,
    resolveExtensions: [
      ".web.tsx",
      ".web.ts",
      ".web.jsx",
      ".web.js",
      ".tsx",
      ".ts",
      ".jsx",
      ".js"
    ],
    platform: "node",
    tsconfig,
    loader: {
      ".js": "jsx",
      ".png": "dataurl",
      ".jpg": "dataurl",
      ".jpeg": "dataurl",
      ".svg": "dataurl",
      ".gif": "dataurl",
      ".webp": "dataurl",
      ".woff2": "dataurl",
      ".woff": "dataurl",
      ".eot": "dataurl",
      ".otf": "dataurl",
      ".ttf": "dataurl"
    },
    logLevel: "warning",
    plugins: [
      {
        name: "external",
        setup(build) {
          build.onResolve({ filter: /@tamagui\/core/ }, (args) => ({
            path: platform === "native" ? "@tamagui/core/native" : "@tamagui/core",
            external: !0
          })), build.onResolve({ filter: /react-native\/package.json$/ }, (args) => ({
            path: "react-native/package.json",
            external: !0
          })), build.onResolve({ filter: /@tamagui\/web/ }, (args) => ({
            path: platform === "native" ? "@tamagui/core/native" : "@tamagui/core",
            external: !0
          })), build.onResolve({ filter: /^(react-native|react-native\/.*)$/ }, (args) => ({
            path: "react-native-web-lite",
            external: !0
          }));
        }
      },
      (0, import_esbuildAliasPlugin.esbuildAliasPlugin)({
        ...aliases
      })
    ],
    ...options
  };
}
async function bundle(props, platform, aliases) {
  await asyncLock(props);
  const config = getESBuildConfig(props, platform, aliases);
  return import_esbuild.default.build(config);
}
async function asyncLock(props) {
  var _a;
  const lockFile = (0, import_path.join)((0, import_path.dirname)(props.outfile), (0, import_path.basename)(props.outfile, ".lock")), lockStat = await (0, import_fs_extra.stat)(lockFile).catch(() => {
  });
  if ((lockStat ? (/* @__PURE__ */ new Date()).getTime() - new Date(lockStat.mtime).getTime() : 1 / 0) < 500) {
    (_a = process.env.DEBUG) != null && _a.startsWith("tamagui") && console.log("Waiting for existing build", props.entryPoints);
    let tries = 5;
    for (; tries--; ) {
      if (await (0, import_fs_extra.pathExists)(props.outfile))
        return;
      await new Promise((res) => setTimeout(res, 50));
    }
  }
  (0, import_fs_extra.writeFile)(lockFile, "");
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  bundle
});
//# sourceMappingURL=bundle.js.map
