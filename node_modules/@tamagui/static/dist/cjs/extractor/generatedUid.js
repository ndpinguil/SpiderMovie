var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var generatedUid_exports = {};
__export(generatedUid_exports, {
  generateUid: () => generateUid
});
module.exports = __toCommonJS(generatedUid_exports);
var t = __toESM(require("@babel/types"));
function generateUid(scope, name) {
  if (typeof scope != "object")
    throw "generateUid expects a scope object as its first parameter";
  if (!(typeof name == "string" && name !== ""))
    throw "generateUid expects a valid name as its second parameter";
  name = t.toIdentifier(name).replace(/^_+/, "").replace(/[0-9]+$/g, "");
  let uid, i = 0;
  do
    i > 1 ? uid = name + i : uid = name, i++;
  while (scope.hasLabel(uid) || scope.hasBinding(uid) || scope.hasGlobal(uid) || scope.hasReference(uid));
  const program = scope.getProgramParent();
  return program.references[uid] = !0, program.uids[uid] = !0, uid;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  generateUid
});
//# sourceMappingURL=generatedUid.js.map
