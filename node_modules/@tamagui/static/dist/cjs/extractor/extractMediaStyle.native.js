"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var extractMediaStyle_exports = {};
__export(extractMediaStyle_exports, {
  extractMediaStyle: () => extractMediaStyle,
  isValidMediaCall: () => isValidMediaCall
});
module.exports = __toCommonJS(extractMediaStyle_exports);
var t = __toESM(require("@babel/types")), import_constants = require("../constants"), import_requireTamaguiCore = require("../helpers/requireTamaguiCore"), import_extractHelpers = require("./extractHelpers");
function extractMediaStyle(props, ternary, jsxPath, tamaguiConfig, sourcePath, importance = 0, shouldPrintDebug = !1) {
  const { getStylesAtomic, mediaObjectToString } = (0, import_requireTamaguiCore.requireTamaguiCore)("web"), mt = getMediaQueryTernary(props, ternary, jsxPath, sourcePath);
  if (!mt)
    return null;
  const { key } = mt;
  if (!tamaguiConfig.media[key])
    return console.error(`Media query "${key}" not found: ${Object.keys(tamaguiConfig.media)}`), null;
  const getStyleObj = (styleObj, negate = !1) => styleObj ? { styleObj, negate } : null, styleOpts = [
    getStyleObj(ternary.consequent, !1),
    getStyleObj(ternary.alternate, !0)
  ].filter(import_extractHelpers.isPresent);
  if (shouldPrintDebug && !styleOpts.length)
    return console.log("  media query, no styles?"), null;
  const mediaKeyPrecendence = Object.keys(tamaguiConfig.media).reduce((acc, cur, i) => (acc[cur] = new Array(importance + 1).fill(":root").join(""), acc), {});
  let mediaStyles = [];
  for (const { styleObj, negate } of styleOpts) {
    const singleMediaStyles = getStylesAtomic(styleObj).map((style) => {
      const negKey = negate ? "0" : "", ogPrefix = style.identifier.slice(0, style.identifier.indexOf("-") + 1), identifier = `${style.identifier.replace(
        ogPrefix,
        `${ogPrefix}${import_constants.MEDIA_SEP}${key}${negKey}${import_constants.MEDIA_SEP}`
      )}`, className = `.${identifier}`, mediaSelector = mediaObjectToString(tamaguiConfig.media[key]), mediaQuery = `${negate ? "not all" : "screen"} and ${mediaSelector}`, precendencePrefix = mediaKeyPrecendence[key], styleInner = style.rules.map((rule) => rule.replace(style.identifier, identifier)).join(";");
      let styleRule = "";
      return styleInner.includes("@media") ? styleRule = styleInner.replace("{", ` and ${mediaQuery} {`) : styleRule = `@media ${mediaQuery} { ${precendencePrefix}${styleInner} }`, {
        ...style,
        identifier,
        className,
        rules: [styleRule]
      };
    });
    shouldPrintDebug === "verbose" && console.log("  media styles:", importance, styleObj, singleMediaStyles.map((x) => x.identifier).join(", ")), mediaStyles = [...mediaStyles, ...singleMediaStyles];
  }
  return ternary.remove(), { mediaStyles, ternaryWithoutMedia: mt.ternaryWithoutMedia };
}
function getMediaQueryTernary(props, ternary, jsxPath, sourcePath) {
  if (t.isLogicalExpression(ternary.test) && ternary.test.operator === "&&") {
    const mediaLeft = getMediaInfoFromExpression(
      props,
      ternary.test.left,
      jsxPath,
      sourcePath,
      ternary.inlineMediaQuery
    );
    if (mediaLeft)
      return {
        ...mediaLeft,
        ternaryWithoutMedia: {
          ...ternary,
          test: ternary.test.right
        }
      };
  }
  const result = getMediaInfoFromExpression(
    props,
    ternary.test,
    jsxPath,
    sourcePath,
    ternary.inlineMediaQuery
  );
  return result ? {
    ...result,
    ternaryWithoutMedia: null
  } : null;
}
function getMediaInfoFromExpression(props, test, jsxPath, sourcePath, inlineMediaQuery) {
  var _a, _b, _c;
  if (inlineMediaQuery)
    return {
      key: inlineMediaQuery,
      bindingName: inlineMediaQuery
    };
  if (t.isMemberExpression(test) && t.isIdentifier(test.object) && t.isIdentifier(test.property)) {
    const name = test.object.name, key = test.property.name, binding = jsxPath.scope.getAllBindings()[name];
    if (!binding)
      return !1;
    const bindingNode = (_a = binding.path) == null ? void 0 : _a.node;
    return !t.isVariableDeclarator(bindingNode) || !bindingNode.init || !isValidMediaCall(props, jsxPath, bindingNode.init, sourcePath) ? !1 : { key, bindingName: name };
  }
  if (t.isIdentifier(test)) {
    const key = test.name, node = (_c = (_b = jsxPath.scope.getBinding(test.name)) == null ? void 0 : _b.path) == null ? void 0 : _c.node;
    return !t.isVariableDeclarator(node) || !node.init || !isValidMediaCall(props, jsxPath, node.init, sourcePath) ? !1 : { key, bindingName: key };
  }
  return null;
}
function isValidMediaCall(props, jsxPath, init, sourcePath) {
  if (!init || !t.isCallExpression(init) || !t.isIdentifier(init.callee) || init.callee.name !== "useMedia")
    return !1;
  const mediaBinding = jsxPath.scope.getAllBindings().useMedia;
  if (!mediaBinding)
    return !1;
  const useMediaImport = mediaBinding.path.parent;
  return !(!t.isImportDeclaration(useMediaImport) || !(0, import_extractHelpers.isValidImport)(props, sourcePath));
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  extractMediaStyle,
  isValidMediaCall
});
//# sourceMappingURL=extractMediaStyle.js.map
