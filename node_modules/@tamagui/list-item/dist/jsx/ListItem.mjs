import { getFontSize } from "@tamagui/font-size";
import { getFontSized } from "@tamagui/get-font-sized";
import { getSize, getSpace } from "@tamagui/get-token";
import { useGetThemedIcon } from "@tamagui/helpers-tamagui";
import { ThemeableStack, YStack } from "@tamagui/stacks";
import { SizableText, wrapChildrenInText } from "@tamagui/text";
import {
  Spacer,
  getTokens,
  getVariableValue,
  styled,
  useProps,
  withStaticProperties
} from "@tamagui/web";
const NAME = "ListItem";
const listItemVariants = {
  unstyled: {
    false: {
      size: "$true",
      alignItems: "center",
      flexWrap: "nowrap",
      width: "100%",
      borderColor: "$borderColor",
      maxWidth: "100%",
      overflow: "hidden",
      flexDirection: "row",
      backgroundColor: "$background"
    }
  },
  size: {
    "...size": (val, { tokens }) => {
      return {
        minHeight: tokens.size[val],
        paddingHorizontal: tokens.space[val],
        paddingVertical: getSpace(tokens.space[val], {
          shift: -4
        })
      };
    }
  },
  active: {
    true: {
      hoverStyle: {
        backgroundColor: "$background"
      }
    }
  },
  disabled: {
    true: {
      opacity: 0.5,
      // TODO breaking types
      pointerEvents: "none"
    }
  }
};
const ListItemFrame = styled(ThemeableStack, {
  name: NAME,
  tag: "li",
  variants: listItemVariants,
  defaultVariants: {
    unstyled: false
  }
});
const ListItemText = styled(SizableText, {
  name: "ListItemText",
  variants: {
    unstyled: {
      false: {
        color: "$color",
        size: "$true",
        flexGrow: 1,
        flexShrink: 1,
        ellipse: true,
        cursor: "default"
      }
    }
  },
  defaultVariants: {
    unstyled: false
  }
});
const ListItemSubtitle = styled(ListItemText, {
  name: "ListItemSubtitle",
  variants: {
    unstyled: {
      false: {
        opacity: 0.6,
        maxWidth: "100%",
        color: "$color"
      }
    },
    size: {
      "...size": (val, extras) => {
        const oneSmaller = getSize(val, {
          shift: -1,
          excludeHalfSteps: true
        });
        const fontStyle = getFontSized(oneSmaller.key, extras);
        return fontStyle;
      }
    }
  },
  defaultVariants: {
    unstyled: false
  }
});
const ListItemTitle = styled(ListItemText, {
  name: "ListItemTitle"
});
const useListItem = (props, {
  Text = ListItemText,
  Subtitle = ListItemSubtitle,
  Title = ListItemTitle
} = { Text: ListItemText, Subtitle: ListItemSubtitle, Title: ListItemTitle }) => {
  const {
    children,
    icon,
    iconAfter,
    noTextWrap,
    theme: themeName,
    space,
    spaceFlex,
    scaleIcon = 1,
    scaleSpace = 1,
    unstyled = false,
    subTitle,
    // text props
    color,
    fontWeight,
    letterSpacing,
    fontSize,
    fontFamily,
    textAlign,
    textProps,
    title,
    ...rest
  } = props;
  const mediaActiveProps = useProps({
    scaleIcon,
    scaleSpace,
    unstyled,
    ...props
  });
  const size = mediaActiveProps.size || "$true";
  const iconSize = getFontSize(size) * scaleIcon;
  const getThemedIcon = useGetThemedIcon({ size: iconSize, color });
  const [themedIcon, themedIconAfter] = [icon, iconAfter].map(getThemedIcon);
  const spaceSize = getVariableValue(getTokens().space[mediaActiveProps.space] ?? iconSize) * scaleSpace;
  const contents = wrapChildrenInText(Text, mediaActiveProps);
  return {
    props: {
      fontFamily,
      ...rest,
      children: <>
        {themedIcon ? <>
          {themedIcon}
          <Spacer size={spaceSize} />
        </> : null}
        {
          /* helper for common title/subtitle pttern */
        }
        {
          /* rome-ignore lint/complexity/noExtraBooleanCast: <explanation> */
        }
        {Boolean(title || subTitle) ? <YStack flex={1}>
          {noTextWrap === "all" ? title : <Title size={size}>{title}</Title>}
          {subTitle ? <>{typeof subTitle === "string" && noTextWrap !== "all" ? (
            // TODO can use theme but we need to standardize to alt themes
            // or standardize on subtle colors in themes
            <Subtitle unstyled={mediaActiveProps.unstyled} size={size}>{subTitle}</Subtitle>
          ) : subTitle}</> : null}
          {contents}
        </YStack> : contents}
        {themedIconAfter ? <>
          <Spacer size={spaceSize} />
          {themedIconAfter}
        </> : null}
      </>
    }
  };
};
const ListItemComponent = ListItemFrame.styleable(function ListItem(props, ref) {
  const { props: listItemProps } = useListItem(props);
  return <ListItemFrame ref={ref} justifyContent="space-between" {...listItemProps} />;
});
const listItemStaticConfig = {
  inlineProps: /* @__PURE__ */ new Set([
    // text props go here (can't really optimize them, but we never fully extract listItem anyway)
    "color",
    "fontWeight",
    "fontSize",
    "fontFamily",
    "letterSpacing",
    "textAlign"
  ])
};
const ListItem2 = withStaticProperties(ListItemComponent, {
  Text: ListItemText,
  Subtitle: ListItemSubtitle
});
export {
  ListItem2 as ListItem,
  ListItemFrame,
  ListItemSubtitle,
  ListItemText,
  ListItemTitle,
  listItemStaticConfig,
  listItemVariants,
  useListItem
};
//# sourceMappingURL=ListItem.mjs.map
