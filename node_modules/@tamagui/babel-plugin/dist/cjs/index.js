var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var src_exports = {};
__export(src_exports, {
  default: () => src_default
});
module.exports = __toCommonJS(src_exports);
var import_path = require("path"), import_generator = __toESM(require("@babel/generator")), import_helper_plugin_utils = require("@babel/helper-plugin-utils"), import_template = __toESM(require("@babel/template")), t = __toESM(require("@babel/types")), import_simple_hash = require("@tamagui/simple-hash");
const importNativeView = (0, import_template.default)(`
const __ReactNativeView = require('react-native').View;
const __ReactNativeText = require('react-native').Text;
`), importStyleSheet = (0, import_template.default)(`
const __ReactNativeStyleSheet = require('react-native').StyleSheet;
`);
process.env.TAMAGUI_TARGET = "web";
const {
  createExtractor,
  getPragmaOptions,
  isSimpleSpread,
  literalToAst
} = require("@tamagui/static"), extractor = createExtractor();
var src_default = (0, import_helper_plugin_utils.declare)(function(api, options) {
  return api.assertVersion(7), {
    name: "tamagui",
    visitor: {
      Program: {
        enter(root) {
          var _a, _b, _c, _d, _e;
          let sourcePath = this.file.opts.filename;
          (_a = process.env.SOURCE_ROOT) != null && _a.endsWith("ios") && (sourcePath = sourcePath.replace("/ios", ""));
          let hasImportedView = !1;
          const sheetStyles = {}, sheetIdentifier = root.scope.generateUidIdentifier("sheet"), firstComment = ((_e = (_d = (_c = (_b = root.node.body[0]) == null ? void 0 : _b.leadingComments) == null ? void 0 : _c[0]) == null ? void 0 : _d.value) == null ? void 0 : _e.trim()) ?? "", { shouldPrintDebug, shouldDisable } = getPragmaOptions({
            disableCommentCheck: !0,
            source: firstComment,
            path: sourcePath
          });
          if (shouldDisable)
            return;
          function addSheetStyle(style, node) {
            let key = `${`${Object.keys(sheetStyles).length}`}`;
            if (process.env.NODE_ENV === "development") {
              const lineNumbers = node.loc ? node.loc.start.line + (node.loc.start.line !== node.loc.end.line ? `-${node.loc.end.line}` : "") : "";
              key += `:${(0, import_path.basename)(sourcePath)}:${lineNumbers}`;
            }
            return sheetStyles[key] = style, readStyleExpr(key);
          }
          function readStyleExpr(key) {
            return (0, import_template.default)("SHEET['KEY']")({
              SHEET: sheetIdentifier.name,
              KEY: key
            }).expression;
          }
          try {
            extractor.parseSync(root, {
              // @ts-expect-error in case they leave it out
              platform: "native",
              shouldPrintDebug,
              importsWhitelist: ["constants.js", "colors.js"],
              deoptProps: /* @__PURE__ */ new Set([
                "focusStyle",
                "hoverStyle",
                "pressStyle",
                "pointerEvents"
              ]),
              extractStyledDefinitions: options.forceExtractStyleDefinitions,
              excludeProps: /* @__PURE__ */ new Set([
                "className",
                "userSelect",
                "whiteSpace",
                "textOverflow",
                "cursor",
                "contain"
              ]),
              ...options,
              // disable this extraction for now at least, need to figure out merging theme vs non-theme
              // because theme need to stay in render(), whereas non-theme can be extracted
              // for now just turn it off entirely at a small perf loss
              disableExtractInlineMedia: !0,
              // disable extracting variables as no native concept of them (only theme values)
              disableExtractVariables: "theme",
              sourcePath,
              // disabling flattening for now
              // it's flattening a plain <Paragraph>hello</Paragraph> which breaks things because themes
              // thinking it's not really worth the effort to do much compilation on native
              // for now just disable flatten as it can only run in narrow places on native
              // disableFlattening: 'styled',
              getFlattenedNode({ isTextView }) {
                return hasImportedView || (hasImportedView = !0, root.unshiftContainer("body", importNativeView())), isTextView ? "__ReactNativeText" : "__ReactNativeView";
              },
              onExtractTag(props) {
                if (!props.isFlattened)
                  return;
                assertValidTag(props.node);
                const stylesExpr = t.arrayExpression([]), finalAttrs = [];
                function addStyle(expr, key) {
                  props.isFlattened ? stylesExpr.elements.push(expr) : finalAttrs.push(
                    t.jsxAttribute(
                      t.jsxIdentifier(`_style${key}`),
                      t.jsxExpressionContainer(expr)
                    )
                  );
                }
                for (const attr of props.attrs)
                  switch (attr.type) {
                    case "style": {
                      const { themed, plain } = splitThemeStyles(attr.value);
                      for (const key in themed)
                        finalAttrs.push(
                          t.jsxAttribute(
                            t.jsxIdentifier(key),
                            t.stringLiteral(themed[key])
                          )
                        );
                      const ident = addSheetStyle(plain, props.node);
                      addStyle(ident, (0, import_simple_hash.simpleHash)(JSON.stringify(plain)));
                      break;
                    }
                    case "ternary": {
                      const { consequent, alternate } = attr.value, cons = addSheetStyle(consequent, props.node), alt = addSheetStyle(alternate, props.node), styleExpr = t.conditionalExpression(
                        attr.value.test,
                        cons,
                        alt
                      );
                      addStyle(
                        styleExpr,
                        (0, import_simple_hash.simpleHash)(JSON.stringify({ consequent, alternate }))
                      );
                      break;
                    }
                    case "attr": {
                      t.isJSXSpreadAttribute(attr.value) && isSimpleSpread(attr.value) && stylesExpr.elements.push(
                        t.memberExpression(attr.value.argument, t.identifier("style"))
                      ), finalAttrs.push(attr.value);
                      break;
                    }
                  }
                props.node.attributes = finalAttrs, props.isFlattened && props.node.attributes.push(
                  t.jsxAttribute(
                    t.jsxIdentifier("style"),
                    t.jsxExpressionContainer(
                      stylesExpr.elements.length === 1 ? stylesExpr.elements[0] : stylesExpr
                    )
                  )
                );
              }
            });
          } catch (err) {
            if (err instanceof Error) {
              let message = `${shouldPrintDebug === "verbose" ? err : err.message}`;
              message.includes("Unexpected return value from visitor method") && (message = "Unexpected return value from visitor method"), console.warn("Error in Tamagui parse, skipping", message, err.stack);
              return;
            }
          }
          if (!Object.keys(sheetStyles).length) {
            shouldPrintDebug && console.log("END no styles");
            return;
          }
          const sheetObject = literalToAst(sheetStyles), sheetOuter = (0, import_template.default)(
            "const SHEET = __ReactNativeStyleSheet.create(null)"
          )({
            SHEET: sheetIdentifier.name
          });
          sheetOuter.declarations[0].init.arguments[0] = sheetObject, root.unshiftContainer("body", sheetOuter), root.unshiftContainer("body", importStyleSheet()), shouldPrintDebug && (console.log(`
 -------- output code ------- 
`), console.log(
            (0, import_generator.default)(root.parent).code.split(`
`).filter((x) => !x.startsWith("//")).join(`
`)
          ));
        }
      }
    }
  };
});
function assertValidTag(node) {
  var _a;
  node.attributes.find((x) => x.type === "JSXAttribute" && x.name.name === "style") && (_a = process.env.DEBUG) != null && _a.startsWith("tamagui") && console.warn("\u26A0\uFE0F Cannot pass style attribute to extracted style");
}
function splitThemeStyles(style) {
  const themed = {}, plain = {};
  for (const key in style) {
    const val = style[key];
    val && val[0] === "$" ? themed[key] = val : plain[key] = val;
  }
  return { themed, plain };
}
//# sourceMappingURL=index.js.map
