import { isMinusZero } from "./isMinusZero";
import { setThemeInfo } from "./themeInfo";
const identityCache = /* @__PURE__ */ new Map();
function createTheme(palette, definition, options, name, skipCache = !1) {
  const cacheKey = skipCache ? "" : JSON.stringify([name, palette, definition, options]);
  if (!skipCache && identityCache.has(cacheKey))
    return identityCache.get(cacheKey);
  const theme = {
    ...Object.fromEntries(
      Object.entries(definition).map(([key, offset]) => [key, getValue(palette, offset)])
    ),
    ...options?.nonInheritedValues
  };
  return cacheKey && (setThemeInfo(theme, { palette, definition, options, name }), identityCache.set(cacheKey, theme)), theme;
}
const getValue = (palette, value) => {
  if (typeof value == "string")
    return value;
  const max = palette.length - 1, next = (value === 0 ? !isMinusZero(value) : value >= 0) ? value : max + value, index = Math.min(Math.max(0, next), max);
  return palette[index];
};
function addChildren(themes, getChildren) {
  const out = { ...themes };
  for (const key in themes) {
    const subThemes = getChildren(key, themes[key]);
    for (const sKey in subThemes)
      out[`${key}_${sKey}`] = subThemes[sKey];
  }
  return out;
}
export {
  addChildren,
  createTheme
};
//# sourceMappingURL=createTheme.js.map
