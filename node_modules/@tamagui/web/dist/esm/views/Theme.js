import { isWeb } from "@tamagui/constants";
import React, {
  Children,
  cloneElement,
  forwardRef,
  isValidElement,
  useMemo,
  useRef
} from "react";
import { variableToString } from "../createVariable";
import { ThemeManagerContext } from "../helpers/ThemeManagerContext";
import { useChangeThemeEffect } from "../hooks/useTheme";
import { ThemeDebug } from "./ThemeDebug";
import { jsx } from "react/jsx-runtime";
const Theme = forwardRef(function(props, ref) {
  if (props.disable)
    return props.children;
  const isRoot = !!props._isRoot, disableDirectChildTheme = props["disable-child-theme"], themeState = useChangeThemeEffect(props, isRoot), children = useMemo(() => {
    let children2 = disableDirectChildTheme ? Children.map(
      props.children,
      (child) => cloneElement(child, { "data-disable-theme": !0 })
    ) : props.children;
    if (ref)
      try {
        React.Children.only(children2), children2 = cloneElement(children2, { ref });
      } catch {
      }
    return process.env.NODE_ENV === "development" && props.debug === "visualize" && (children2 = /* @__PURE__ */ jsx(ThemeDebug, { themeState, themeProps: props, children: children2 })), children2;
  }, [props.children, disableDirectChildTheme]);
  return useThemedChildren(themeState, children, props, isRoot);
});
Theme.avoidForwardRef = !0;
function useThemedChildren(themeState, children, props, isRoot = !1) {
  const { themeManager, isNewTheme } = themeState, { shallow, forceClassName } = props, hasEverThemed = useRef(!1);
  if (isNewTheme && (hasEverThemed.current = !0), !(isNewTheme || props.inverse || hasEverThemed.current || forceClassName || isRoot))
    return children;
  let next = children;
  shallow && themeManager && (next = Children.toArray(children).map((child) => isValidElement(child) ? cloneElement(
    child,
    void 0,
    /* @__PURE__ */ jsx(Theme, { name: themeManager.state.parentName, children: child.props.children })
  ) : child));
  const elementsWithContext = themeManager ? /* @__PURE__ */ jsx(ThemeManagerContext.Provider, { value: themeManager, children: next }) : next;
  return forceClassName === !1 ? elementsWithContext : isWeb ? wrapThemeElements({
    children: elementsWithContext,
    themeState,
    forceClassName,
    isRoot
  }) : elementsWithContext;
}
function wrapThemeElements({
  children,
  themeState,
  forceClassName,
  isRoot
}) {
  if (isRoot && forceClassName === !1)
    return children;
  const inverse = themeState.state?.inverse;
  if (!themeState.isNewTheme && !inverse && !forceClassName)
    return /* @__PURE__ */ jsx("span", { className: "_dsp_contents is_Theme", children });
  const themeColor = themeState.state?.theme && themeState.isNewTheme ? variableToString(themeState.state.theme.color) : "", colorStyle = themeColor ? {
    color: themeColor
  } : void 0;
  let className = themeState.state?.className || "";
  isRoot && (className = className.replace("t_sub_theme", ""));
  let themedChildren = /* @__PURE__ */ jsx("span", { className: `${className} _dsp_contents is_Theme`, style: colorStyle, children });
  if (inverse != null || forceClassName) {
    const name = themeState.state?.name || "";
    themedChildren = /* @__PURE__ */ jsx(
      "span",
      {
        className: `${name.startsWith("light") ? "t_light" : name.startsWith("dark") ? "t_dark" : ""} _dsp_contents ${inverse ? "is_inversed" : ""}`,
        children: themedChildren
      }
    );
  }
  return themedChildren;
}
export {
  Theme,
  useThemedChildren,
  wrapThemeElements
};
//# sourceMappingURL=Theme.js.map
