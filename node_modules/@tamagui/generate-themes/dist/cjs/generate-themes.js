var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var generate_themes_exports = {};
__export(generate_themes_exports, {
  generateThemes: () => generateThemes
});
module.exports = __toCommonJS(generate_themes_exports);
var import_module = __toESM(require("module")), import_path = require("path");
const ogRequire = import_module.default.prototype.require;
async function generateThemes(inputFile) {
  const { unregister } = require("esbuild-register/dist/node").register({
    hookIgnoreNodeModules: !1
  }), inputFilePath = inputFile[0] === "." ? (0, import_path.join)(process.cwd(), inputFile) : inputFile;
  purgeCache(inputFilePath);
  let promise = null;
  import_module.default.prototype.require = function(id) {
    const out = ogRequire.apply(this, arguments);
    if (id === "@tamagui/theme-builder" && !promise) {
      let resolve;
      return promise = new Promise((res) => {
        resolve = res;
      }), createThemeIntercept(out, {
        onComplete: (result) => {
          resolve == null || resolve(result.themeBuilder);
        }
      });
    }
    return out;
  };
  try {
    const requiredThemes = require(inputFilePath), themes = requiredThemes.default || requiredThemes.themes, generatedThemes = generatedThemesToTypescript(themes), themeBuilder = promise ? await promise : null;
    return {
      generated: generatedThemes,
      state: themeBuilder == null ? void 0 : themeBuilder.state
    };
  } catch (err) {
    console.warn(` \u26A0\uFE0F Error running theme builder: ${err}`, err == null ? void 0 : err.stack);
  } finally {
    import_module.default.prototype.require = ogRequire, unregister();
  }
}
const dedupedTokens = /* @__PURE__ */ new Map();
function generatedThemesToTypescript(themes) {
  const dedupedThemes = /* @__PURE__ */ new Map(), dedupedThemeToNames = /* @__PURE__ */ new Map();
  let i = 0;
  for (const name in themes) {
    i++;
    const theme = themes[name];
    let j = 0;
    for (const [key2, value] of Object.entries(theme)) {
      i++;
      const uniqueKey = `t${i}${j}`;
      dedupedTokens.has(value) || dedupedTokens.set(value, uniqueKey);
    }
    const key = JSON.stringify(theme);
    dedupedThemes.has(key) ? dedupedThemeToNames.set(key, [...dedupedThemeToNames.get(key), name]) : (dedupedThemes.set(key, theme), dedupedThemeToNames.set(key, [name]));
  }
  const baseKeys = Object.entries(themes.light || themes[Object.keys(themes)[0]]);
  let out = `${`type Theme = {
${baseKeys.map(([k]) => `  ${k}: string;
`).join("")}
}`}
`;
  out += `
function t(a) {
  let res: Record<string, string> = {}
  for (const [ki, vi] of a) {
    // @ts-ignore
    res[ks[ki]] = vs[vi]
  }
  return res
}
`, out += `const vs = [
`;
  let index = 0;
  const valueToIndex = {};
  dedupedTokens.forEach((name, value) => {
    valueToIndex[value] = index, index++, out += `  '${value}',
`;
  }), out += `]

`;
  const keys = baseKeys.map(([k]) => k);
  out += `const ks = [
`, out += keys.map((k) => `'${k}'`).join(`,
`), out += `]

`;
  let nameI = 0;
  return dedupedThemes.forEach((theme) => {
    nameI++;
    const key = JSON.stringify(theme), names = dedupedThemeToNames.get(key), name = `n${nameI}`, baseTheme = `const ${name} = ${objectToJsString(
      theme,
      keys,
      valueToIndex
    )} as Theme`;
    out += `
${baseTheme}`;
    const duplicateThemes = names.map((n) => `export const ${n} = ${name} as Theme`);
    out += `

` + duplicateThemes.join(`
`);
  }), out;
}
function objectToJsString(obj, keys, valueToIndex) {
  let arrItems = [];
  for (const key in obj) {
    const ki = keys.indexOf(key), vi = valueToIndex[obj[key]];
    arrItems.push(`[${ki}, ${vi}]`);
  }
  return `t([${arrItems.join(",")}])`;
}
function createThemeIntercept(createThemeExport, themeBuilderInterceptOpts) {
  return new Proxy(createThemeExport, {
    get(target, key) {
      const out = Reflect.get(target, key);
      return key === "createThemeBuilder" ? new Proxy(out, {
        apply(target2, thisArg, argArray) {
          const builder = Reflect.apply(target2, thisArg, argArray);
          return themeBuilderIntercept(builder, themeBuilderInterceptOpts);
        }
      }) : out;
    }
  });
}
function themeBuilderIntercept(themeBuilder, themeBuilderInterceptOpts) {
  return new Proxy(themeBuilder, {
    get(target, key) {
      const out = Reflect.get(target, key);
      return key === "build" && themeBuilderInterceptOpts.onComplete({
        themeBuilder
      }), out;
    }
  });
}
function purgeCache(moduleName) {
  searchCache(moduleName, function(mod) {
    delete require.cache[mod.id];
  }), Object.keys(module.constructor._pathCache).forEach(function(cacheKey) {
    cacheKey.indexOf(moduleName) > 0 && delete module.constructor._pathCache[cacheKey];
  });
}
function searchCache(moduleName, callback) {
  let mod = require.resolve(moduleName);
  mod && (mod = require.cache[mod]) !== void 0 && function traverse(mod2, depth = 0) {
    depth > 10 || (mod2.children.forEach(function(child) {
      traverse(child, depth + 1);
    }), callback(mod2));
  }(mod);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  generateThemes
});
//# sourceMappingURL=generate-themes.js.map
