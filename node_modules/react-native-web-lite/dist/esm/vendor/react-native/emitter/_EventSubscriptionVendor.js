import { invariant } from "react-native-web-internals";
class EventSubscriptionVendor {
  constructor() {
    this._subscriptionsForType = {};
  }
  /**
   * Adds a subscription keyed by an event type.
   *
   * @param {string} eventType
   * @param {EventSubscription} subscription
   */
  addSubscription(eventType, subscription) {
    invariant(
      subscription.subscriber === this,
      "The subscriber of the subscription is incorrectly set."
    ), this._subscriptionsForType[eventType] || (this._subscriptionsForType[eventType] = []);
    var key = this._subscriptionsForType[eventType].length;
    return this._subscriptionsForType[eventType].push(subscription), subscription.eventType = eventType, subscription.key = key, subscription;
  }
  /**
   * Removes a bulk set of the subscriptions.
   *
   * @param {?string} eventType - Optional name of the event type whose
   *   registered supscriptions to remove, if null remove all subscriptions.
   */
  removeAllSubscriptions(eventType) {
    eventType == null ? this._subscriptionsForType = {} : delete this._subscriptionsForType[eventType];
  }
  /**
   * Removes a specific subscription. Instead of calling this function, call
   * `subscription.remove()` directly.
   *
   * @param {object} subscription
   */
  removeSubscription(subscription) {
    var eventType = subscription.eventType, key = subscription.key, subscriptionsForType = this._subscriptionsForType[eventType];
    subscriptionsForType && delete subscriptionsForType[key];
  }
  /**
   * Returns the array of subscriptions that are currently registered for the
   * given event type.
   *
   * Note: This array can be potentially sparse as subscriptions are deleted
   * from it when they are removed.
   *
   * TODO: This returns a nullable array. wat?
   *
   * @param {string} eventType
   * @returns {?array}
   */
  getSubscriptionsForType(eventType) {
    return this._subscriptionsForType[eventType];
  }
}
var EventSubscriptionVendor_default = EventSubscriptionVendor;
export {
  EventSubscriptionVendor_default as default
};
//# sourceMappingURL=_EventSubscriptionVendor.js.map
