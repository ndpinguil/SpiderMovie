import { StyleSheet } from "react-native-web-internals";
import NativeAnimatedHelper from "../NativeAnimatedHelper";
import AnimatedNode from "./AnimatedNode";
import AnimatedTransform from "./AnimatedTransform";
import AnimatedWithChildren from "./AnimatedWithChildren";
var flattenStyle = StyleSheet.flatten;
function createAnimatedStyle(inputStyle) {
  var style = flattenStyle(inputStyle), animatedStyles = {};
  for (var key in style) {
    var value = style[key];
    key === "transform" ? animatedStyles[key] = new AnimatedTransform(value) : value instanceof AnimatedNode ? animatedStyles[key] = value : value && !Array.isArray(value) && typeof value == "object" && (animatedStyles[key] = createAnimatedStyle(value));
  }
  return animatedStyles;
}
class AnimatedStyle extends AnimatedWithChildren {
  constructor(style) {
    super(), this._inputStyle = style, this._style = createAnimatedStyle(style);
  }
  // Recursively get values for nested styles (like iOS's shadowOffset)
  _walkStyleAndGetValues(style) {
    var updatedStyle = {};
    for (var key in style) {
      var value = style[key];
      value instanceof AnimatedNode ? value.__isNative || (updatedStyle[key] = value.__getValue()) : value && !Array.isArray(value) && typeof value == "object" ? updatedStyle[key] = this._walkStyleAndGetValues(value) : updatedStyle[key] = value;
    }
    return updatedStyle;
  }
  __getValue() {
    return [this._inputStyle, this._walkStyleAndGetValues(this._style)];
  }
  // Recursively get animated values for nested styles (like iOS's shadowOffset)
  _walkStyleAndGetAnimatedValues(style) {
    var updatedStyle = {};
    for (var key in style) {
      var value = style[key];
      value instanceof AnimatedNode ? updatedStyle[key] = value.__getAnimatedValue() : value && !Array.isArray(value) && typeof value == "object" && (updatedStyle[key] = this._walkStyleAndGetAnimatedValues(value));
    }
    return updatedStyle;
  }
  __getAnimatedValue() {
    return this._walkStyleAndGetAnimatedValues(this._style);
  }
  __attach() {
    for (var key in this._style) {
      var value = this._style[key];
      value instanceof AnimatedNode && value.__addChild(this);
    }
  }
  __detach() {
    for (var key in this._style) {
      var value = this._style[key];
      value instanceof AnimatedNode && value.__removeChild(this);
    }
    super.__detach();
  }
  __makeNative() {
    for (var key in this._style) {
      var value = this._style[key];
      value instanceof AnimatedNode && value.__makeNative();
    }
    super.__makeNative();
  }
  __getNativeConfig() {
    var styleConfig = {};
    for (var styleKey in this._style)
      if (this._style[styleKey] instanceof AnimatedNode) {
        var style = this._style[styleKey];
        style.__makeNative(), styleConfig[styleKey] = style.__getNativeTag();
      }
    return NativeAnimatedHelper.validateStyles(styleConfig), {
      type: "style",
      style: styleConfig
    };
  }
}
var AnimatedStyle_default = AnimatedStyle;
export {
  AnimatedStyle_default as default
};
//# sourceMappingURL=AnimatedStyle.js.map
