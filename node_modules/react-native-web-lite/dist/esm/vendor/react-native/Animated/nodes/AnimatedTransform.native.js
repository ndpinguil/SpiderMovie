import NativeAnimatedHelper from "../NativeAnimatedHelper";
import AnimatedNode from "./AnimatedNode";
import AnimatedWithChildren from "./AnimatedWithChildren";
class AnimatedTransform extends AnimatedWithChildren {
  constructor(transforms) {
    super(), this._transforms = transforms;
  }
  __makeNative() {
    this._transforms.forEach((transform) => {
      for (var key in transform) {
        var value = transform[key];
        value instanceof AnimatedNode && value.__makeNative();
      }
    }), super.__makeNative();
  }
  __getValue() {
    return this._transforms.map((transform) => {
      var result = {};
      for (var key in transform) {
        var value = transform[key];
        value instanceof AnimatedNode ? result[key] = value.__getValue() : result[key] = value;
      }
      return result;
    });
  }
  __getAnimatedValue() {
    return this._transforms.map((transform) => {
      var result = {};
      for (var key in transform) {
        var value = transform[key];
        value instanceof AnimatedNode ? result[key] = value.__getAnimatedValue() : result[key] = value;
      }
      return result;
    });
  }
  __attach() {
    this._transforms.forEach((transform) => {
      for (var key in transform) {
        var value = transform[key];
        value instanceof AnimatedNode && value.__addChild(this);
      }
    });
  }
  __detach() {
    this._transforms.forEach((transform) => {
      for (var key in transform) {
        var value = transform[key];
        value instanceof AnimatedNode && value.__removeChild(this);
      }
    }), super.__detach();
  }
  __getNativeConfig() {
    var transConfigs = [];
    return this._transforms.forEach((transform) => {
      for (var key in transform) {
        var value = transform[key];
        value instanceof AnimatedNode ? transConfigs.push({
          type: "animated",
          property: key,
          nodeTag: value.__getNativeTag()
        }) : transConfigs.push({
          type: "static",
          property: key,
          value: NativeAnimatedHelper.transformDataType(value)
        });
      }
    }), NativeAnimatedHelper.validateTransform(transConfigs), {
      type: "transform",
      transforms: transConfigs
    };
  }
}
var AnimatedTransform_default = AnimatedTransform;
export {
  AnimatedTransform_default as default
};
//# sourceMappingURL=AnimatedTransform.js.map
