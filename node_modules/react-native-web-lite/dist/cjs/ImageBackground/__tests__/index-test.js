var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
));
var import_react = require("@testing-library/react"), import_Text = __toESM(require("../../Text")), import__ = __toESM(require("..")), import_jsx_runtime = require("react/jsx-runtime");
function findImage(container) {
  return container.firstChild.firstChild;
}
describe("components/ImageBackground", () => {
  describe('prop "children"', () => {
    test("render child content", () => {
      const { getByText } = (0, import_react.render)(
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import__.default, { children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_Text.default, { children: "Hello World!" }) })
      );
      expect(getByText("Hello World!")).toBeDefined();
    });
  }), describe('prop "imageStyle"', () => {
    test("sets the style of the underlying Image", () => {
      const imageStyle = { width: 40, height: 60 }, { container } = (0, import_react.render)(/* @__PURE__ */ (0, import_jsx_runtime.jsx)(import__.default, { imageStyle }));
      expect(
        findImage(container).getAttribute("style").includes("width: 40px; height: 60px;")
      ).toBe(!0);
    });
  }), describe('prop "style"', () => {
    test("sets the style of the container View", () => {
      const style = { margin: 40 }, { container } = (0, import_react.render)(/* @__PURE__ */ (0, import_jsx_runtime.jsx)(import__.default, { style }));
      expect(container.firstChild.getAttribute("style")).toEqual(
        "margin: 40px 40px 40px 40px;"
      );
    });
  });
});
//# sourceMappingURL=index-test.js.map
