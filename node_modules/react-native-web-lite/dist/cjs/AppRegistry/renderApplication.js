var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var renderApplication_exports = {};
__export(renderApplication_exports, {
  default: () => renderApplication,
  getApplication: () => getApplication
});
module.exports = __toCommonJS(renderApplication_exports);
var import_react_native_web_internals = require("react-native-web-internals"), import_react_native_web_internals2 = require("react-native-web-internals"), import_render = __toESM(require("../render/index")), import_AppContainer = __toESM(require("./AppContainer")), import_jsx_runtime = require("react/jsx-runtime");
function renderApplication(RootComponent, WrapperComponent = null, callback = () => {
}, options) {
  const { hydrate: shouldHydrate, initialProps, mode, rootTag } = options, renderFn = shouldHydrate ? mode === "concurrent" ? import_render.hydrate : import_render.hydrateLegacy : mode === "concurrent" ? import_render.render : import_render.default;
  return (0, import_react_native_web_internals2.invariant)(rootTag, "Expect to have a valid rootTag, instead got ", rootTag), renderFn(
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_AppContainer.default, { WrapperComponent, ref: callback, rootTag, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(RootComponent, { ...initialProps }) }),
    rootTag
  );
}
function getApplication(RootComponent, initialProps, WrapperComponent) {
  return { element: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_AppContainer.default, { WrapperComponent, rootTag: {}, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(RootComponent, { ...initialProps }) }), getStyleElement: (props) => {
    const sheet = import_react_native_web_internals.StyleSheet.getSheet();
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      "style",
      {
        ...props,
        dangerouslySetInnerHTML: { __html: sheet.textContent },
        id: sheet.id
      }
    );
  } };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getApplication
});
//# sourceMappingURL=renderApplication.js.map
