"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var AppRegistry_exports = {};
__export(AppRegistry_exports, {
  default: () => AppRegistry
});
module.exports = __toCommonJS(AppRegistry_exports);
var import_react_dom = require("react-dom"), import_react_native_web_internals = require("react-native-web-internals"), import_renderApplication = __toESM(require("./renderApplication"));
const emptyObject = {}, runnables = {};
let componentProviderInstrumentationHook = (component) => component(), wrapperComponentProvider;
class AppRegistry {
  static getAppKeys() {
    return Object.keys(runnables);
  }
  static getApplication(appKey, appParameters) {
    var _a, _b;
    return (0, import_react_native_web_internals.invariant)(
      runnables[appKey] && runnables[appKey].getApplication,
      `Application ${appKey} has not been registered. This is either due to an import error during initialization or failure to call AppRegistry.registerComponent.`
    ), (_b = (_a = runnables[appKey]) == null ? void 0 : _a.getApplication) == null ? void 0 : _b.call(_a, appParameters);
  }
  static registerComponent(appKey, componentProvider) {
    return runnables[appKey] = {
      getApplication: (appParameters) => (0, import_renderApplication.getApplication)(
        componentProviderInstrumentationHook(componentProvider),
        appParameters ? appParameters.initialProps : emptyObject,
        wrapperComponentProvider && wrapperComponentProvider(appParameters)
      ),
      run: (appParameters) => (0, import_renderApplication.default)(
        componentProviderInstrumentationHook(componentProvider),
        wrapperComponentProvider && wrapperComponentProvider(appParameters),
        appParameters.callback,
        {
          hydrate: appParameters.hydrate || !1,
          initialProps: appParameters.initialProps || emptyObject,
          mode: appParameters.mode || "legacy",
          rootTag: appParameters.rootTag
        }
      )
    }, appKey;
  }
  static registerConfig(config) {
    config.forEach(({ appKey, component, run }) => {
      run ? AppRegistry.registerRunnable(appKey, run) : ((0, import_react_native_web_internals.invariant)(component, "No component provider passed in"), AppRegistry.registerComponent(appKey, component));
    });
  }
  // TODO: fix style sheet creation when using this method
  static registerRunnable(appKey, run) {
    return runnables[appKey] = { run }, appKey;
  }
  static runApplication(appKey, appParameters) {
    const isDevelopment = process.env.NODE_ENV !== "production" && process.env.NODE_ENV !== "test";
    if (isDevelopment) {
      const params = { ...appParameters };
      params.rootTag = `#${params.rootTag.id}`, console.log(
        `Running application "${appKey}" with appParams:
`,
        params,
        `
Development-level warnings: ${isDevelopment ? "ON" : "OFF"}.
Performance optimizations: ${isDevelopment ? "OFF" : "ON"}.`
      );
    }
    return (0, import_react_native_web_internals.invariant)(
      runnables[appKey] && runnables[appKey].run,
      `Application "${appKey}" has not been registered. This is either due to an import error during initialization or failure to call AppRegistry.registerComponent.`
    ), runnables[appKey].run(appParameters);
  }
  static setComponentProviderInstrumentationHook(hook) {
    componentProviderInstrumentationHook = hook;
  }
  static setWrapperComponentProvider(provider) {
    wrapperComponentProvider = provider;
  }
  static unmountApplicationComponentAtRootTag(rootTag) {
    (0, import_react_dom.unmountComponentAtNode)(rootTag);
  }
}
//# sourceMappingURL=index.js.map
