var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
));
var import__ = __toESM(require(".."));
describe("apis/Dimensions/index.js", () => {
  test("get", () => {
    expect(import__.default.get("screen")).toMatchInlineSnapshot(`
      {
        "fontScale": 1,
        "height": 0,
        "scale": 1,
        "width": 0,
      }
    `), expect(import__.default.get("window")).toMatchInlineSnapshot(`
      {
        "fontScale": 1,
        "height": 768,
        "scale": 1,
        "width": 1024,
      }
    `);
  }), test("set", () => {
    expect(() => import__.default.set({})).toThrow();
  }), test("addEventListener", () => {
    const handler = jest.fn(), subscription = import__.default.addEventListener("change", handler);
    import__.default._update(), expect(handler).toHaveBeenCalledTimes(1), expect(handler).toHaveBeenLastCalledWith({
      window: import__.default.get("window"),
      screen: import__.default.get("screen")
    }), subscription.remove(), import__.default._update(), expect(handler).toHaveBeenCalledTimes(1);
  }), test("removeEventListener", () => {
    const handler = jest.fn();
    import__.default.removeEventListener("change", handler), import__.default._update(), expect(handler).toHaveBeenCalledTimes(0);
  });
});
//# sourceMappingURL=index-test.js.map
