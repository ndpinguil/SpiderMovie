"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var useAnimatedProps_exports = {};
__export(useAnimatedProps_exports, {
  default: () => useAnimatedProps
});
module.exports = __toCommonJS(useAnimatedProps_exports);
var import_createForOfIteratorHelperLoose = __toESM(require("@babel/runtime/helpers/createForOfIteratorHelperLoose")), import_react = require("react"), import_useRefEffect = __toESM(require("../useRefEffect")), import_AnimatedEvent = require("./AnimatedEvent"), import_NativeAnimatedHelper = __toESM(require("./NativeAnimatedHelper")), import_AnimatedProps = __toESM(require("./nodes/AnimatedProps"));
const useLayoutEffect = typeof window > "u" ? import_react.useEffect : import_react.useLayoutEffect;
function useAnimatedProps(props) {
  var _useReducer = (0, import_react.useReducer)((count) => count + 1, 0), scheduleUpdate = _useReducer[1], onUpdateRef = (0, import_react.useRef)(null), node = (0, import_react.useMemo)(
    () => new import_AnimatedProps.default(
      props,
      () => onUpdateRef.current == null ? void 0 : onUpdateRef.current()
    ),
    [props]
  );
  useAnimatedPropsLifecycle(node);
  var refEffect = (0, import_react.useCallback)(
    (instance) => {
      node.setNativeView(instance), onUpdateRef.current = () => {
        (0, import_react.startTransition)(() => {
          scheduleUpdate();
        });
      };
      var target = getEventTarget(instance), events = [];
      for (var propName in props) {
        var propValue = props[propName];
        propValue instanceof import_AnimatedEvent.AnimatedEvent && propValue.__isNative && (propValue.__attach(target, propName), events.push([propName, propValue]));
      }
      return () => {
        onUpdateRef.current = null;
        for (var _iterator = (0, import_createForOfIteratorHelperLoose.default)(events), _step; !(_step = _iterator()).done; ) {
          var _step$value = _step.value, _propName = _step$value[0], _propValue = _step$value[1];
          _propValue.__detach(target, _propName);
        }
      };
    },
    [props, node]
  ), callbackRef = (0, import_useRefEffect.default)(refEffect);
  return [reduceAnimatedProps(node), callbackRef];
}
function reduceAnimatedProps(node) {
  return {
    ...node.__getValue(),
    collapsable: !1
  };
}
function useAnimatedPropsLifecycle(node) {
  var prevNodeRef = (0, import_react.useRef)(null), isUnmountingRef = (0, import_react.useRef)(!1);
  (0, import_react.useEffect)(() => {
    import_NativeAnimatedHelper.default.API.flushQueue();
  }), useLayoutEffect(() => (isUnmountingRef.current = !1, () => {
    isUnmountingRef.current = !0;
  }), []), useLayoutEffect(() => {
    if (node.__attach(), prevNodeRef.current != null) {
      var prevNode = prevNodeRef.current;
      prevNode.__restoreDefaultValues(), prevNode.__detach(), prevNodeRef.current = null;
    }
    return () => {
      isUnmountingRef.current ? node.__detach() : prevNodeRef.current = node;
    };
  }, [node]);
}
function getEventTarget(instance) {
  return typeof instance == "object" && typeof (instance == null ? void 0 : instance.getScrollableNode) == "function" ? instance.getScrollableNode() : instance;
}
//# sourceMappingURL=useAnimatedProps.js.map
