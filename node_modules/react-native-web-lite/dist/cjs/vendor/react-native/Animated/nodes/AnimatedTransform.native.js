"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var AnimatedTransform_exports = {};
__export(AnimatedTransform_exports, {
  default: () => AnimatedTransform_default
});
module.exports = __toCommonJS(AnimatedTransform_exports);
var import_NativeAnimatedHelper = __toESM(require("../NativeAnimatedHelper")), import_AnimatedNode = __toESM(require("./AnimatedNode")), import_AnimatedWithChildren = __toESM(require("./AnimatedWithChildren"));
class AnimatedTransform extends import_AnimatedWithChildren.default {
  constructor(transforms) {
    super(), this._transforms = transforms;
  }
  __makeNative() {
    this._transforms.forEach((transform) => {
      for (var key in transform) {
        var value = transform[key];
        value instanceof import_AnimatedNode.default && value.__makeNative();
      }
    }), super.__makeNative();
  }
  __getValue() {
    return this._transforms.map((transform) => {
      var result = {};
      for (var key in transform) {
        var value = transform[key];
        value instanceof import_AnimatedNode.default ? result[key] = value.__getValue() : result[key] = value;
      }
      return result;
    });
  }
  __getAnimatedValue() {
    return this._transforms.map((transform) => {
      var result = {};
      for (var key in transform) {
        var value = transform[key];
        value instanceof import_AnimatedNode.default ? result[key] = value.__getAnimatedValue() : result[key] = value;
      }
      return result;
    });
  }
  __attach() {
    this._transforms.forEach((transform) => {
      for (var key in transform) {
        var value = transform[key];
        value instanceof import_AnimatedNode.default && value.__addChild(this);
      }
    });
  }
  __detach() {
    this._transforms.forEach((transform) => {
      for (var key in transform) {
        var value = transform[key];
        value instanceof import_AnimatedNode.default && value.__removeChild(this);
      }
    }), super.__detach();
  }
  __getNativeConfig() {
    var transConfigs = [];
    return this._transforms.forEach((transform) => {
      for (var key in transform) {
        var value = transform[key];
        value instanceof import_AnimatedNode.default ? transConfigs.push({
          type: "animated",
          property: key,
          nodeTag: value.__getNativeTag()
        }) : transConfigs.push({
          type: "static",
          property: key,
          value: import_NativeAnimatedHelper.default.transformDataType(value)
        });
      }
    }), import_NativeAnimatedHelper.default.validateTransform(transConfigs), {
      type: "transform",
      transforms: transConfigs
    };
  }
}
var AnimatedTransform_default = AnimatedTransform;
//# sourceMappingURL=AnimatedTransform.js.map
