"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var AnimatedColor_exports = {};
__export(AnimatedColor_exports, {
  default: () => AnimatedColor
});
module.exports = __toCommonJS(AnimatedColor_exports);
var import_normalize_css_color = __toESM(require("@tamagui/normalize-css-color")), import_NativeAnimatedHelper = __toESM(require("../NativeAnimatedHelper")), import_AnimatedValue = __toESM(require("./AnimatedValue")), import_AnimatedWithChildren = __toESM(require("./AnimatedWithChildren")), NativeAnimatedAPI = import_NativeAnimatedHelper.default.API, defaultColor = {
  r: 0,
  g: 0,
  b: 0,
  a: 1
}, _uniqueId = 1, processColorObject = (color) => color;
function processColor(color) {
  if (color == null)
    return null;
  if (isRgbaValue(color))
    return color;
  var normalizedColor = (0, import_normalize_css_color.default)(
    // $FlowIgnore[incompatible-cast] - Type is verified above
    color
  );
  if (normalizedColor == null)
    return null;
  if (typeof normalizedColor == "object") {
    var processedColorObj = processColorObject(normalizedColor);
    if (processedColorObj != null)
      return processedColorObj;
  } else if (typeof normalizedColor == "number") {
    var r = (normalizedColor & 4278190080) >>> 24, g = (normalizedColor & 16711680) >>> 16, b = (normalizedColor & 65280) >>> 8, a = (normalizedColor & 255) / 255;
    return {
      r,
      g,
      b,
      a
    };
  }
  return null;
}
function isRgbaValue(value) {
  return value && typeof value.r == "number" && typeof value.g == "number" && typeof value.b == "number" && typeof value.a == "number";
}
function isRgbaAnimatedValue(value) {
  return value && value.r instanceof import_AnimatedValue.default && value.g instanceof import_AnimatedValue.default && value.b instanceof import_AnimatedValue.default && value.a instanceof import_AnimatedValue.default;
}
class AnimatedColor extends import_AnimatedWithChildren.default {
  constructor(valueIn, config) {
    super(), this._listeners = {};
    var value = valueIn ?? defaultColor;
    if (isRgbaAnimatedValue(value)) {
      var rgbaAnimatedValue = value;
      this.r = rgbaAnimatedValue.r, this.g = rgbaAnimatedValue.g, this.b = rgbaAnimatedValue.b, this.a = rgbaAnimatedValue.a;
    } else {
      var _processColor, processedColor = (
        // $FlowIgnore[incompatible-cast] - Type is verified above
        (_processColor = processColor(value)) !== null && _processColor !== void 0 ? _processColor : defaultColor
      ), initColor = defaultColor;
      isRgbaValue(processedColor) ? initColor = processedColor : this.nativeColor = processedColor, this.r = new import_AnimatedValue.default(initColor.r), this.g = new import_AnimatedValue.default(initColor.g), this.b = new import_AnimatedValue.default(initColor.b), this.a = new import_AnimatedValue.default(initColor.a);
    }
    (this.nativeColor || config && config.useNativeDriver) && this.__makeNative();
  }
  /**
   * Directly set the value. This will stop any animations running on the value
   * and update all the bound properties.
   */
  setValue(value) {
    var _processColor2, shouldUpdateNodeConfig = !1;
    if (this.__isNative) {
      var nativeTag = this.__getNativeTag();
      NativeAnimatedAPI.setWaitingForIdentifier(nativeTag.toString());
    }
    var processedColor = (_processColor2 = processColor(value)) !== null && _processColor2 !== void 0 ? _processColor2 : defaultColor;
    if (isRgbaValue(processedColor)) {
      var rgbaValue = processedColor;
      this.r.setValue(rgbaValue.r), this.g.setValue(rgbaValue.g), this.b.setValue(rgbaValue.b), this.a.setValue(rgbaValue.a), this.nativeColor != null && (this.nativeColor = null, shouldUpdateNodeConfig = !0);
    } else {
      var nativeColor = processedColor;
      this.nativeColor !== nativeColor && (this.nativeColor = nativeColor, shouldUpdateNodeConfig = !0);
    }
    if (this.__isNative) {
      var _nativeTag = this.__getNativeTag();
      shouldUpdateNodeConfig && NativeAnimatedAPI.updateAnimatedNodeConfig(_nativeTag, this.__getNativeConfig()), NativeAnimatedAPI.unsetWaitingForIdentifier(_nativeTag.toString());
    }
  }
  /**
   * Sets an offset that is applied on top of whatever value is set, whether
   * via `setValue`, an animation, or `Animated.event`. Useful for compensating
   * things like the start of a pan gesture.
   */
  setOffset(offset) {
    this.r.setOffset(offset.r), this.g.setOffset(offset.g), this.b.setOffset(offset.b), this.a.setOffset(offset.a);
  }
  /**
   * Merges the offset value into the base value and resets the offset to zero.
   * The final output of the value is unchanged.
   */
  flattenOffset() {
    this.r.flattenOffset(), this.g.flattenOffset(), this.b.flattenOffset(), this.a.flattenOffset();
  }
  /**
   * Sets the offset value to the base value, and resets the base value to
   * zero. The final output of the value is unchanged.
   */
  extractOffset() {
    this.r.extractOffset(), this.g.extractOffset(), this.b.extractOffset(), this.a.extractOffset();
  }
  /**
   * Adds an asynchronous listener to the value so you can observe updates from
   * animations.  This is useful because there is no way to synchronously read
   * the value because it might be driven natively.
   *
   * Returns a string that serves as an identifier for the listener.
   */
  addListener(callback) {
    var id = String(_uniqueId++), jointCallback = (_ref) => {
      var number = _ref.value;
      callback(this.__getValue());
    };
    return this._listeners[id] = {
      r: this.r.addListener(jointCallback),
      g: this.g.addListener(jointCallback),
      b: this.b.addListener(jointCallback),
      a: this.a.addListener(jointCallback)
    }, id;
  }
  /**
   * Unregister a listener. The `id` param shall match the identifier
   * previously returned by `addListener()`.
   */
  removeListener(id) {
    this.r.removeListener(this._listeners[id].r), this.g.removeListener(this._listeners[id].g), this.b.removeListener(this._listeners[id].b), this.a.removeListener(this._listeners[id].a), delete this._listeners[id];
  }
  /**
   * Remove all registered listeners.
   */
  removeAllListeners() {
    this.r.removeAllListeners(), this.g.removeAllListeners(), this.b.removeAllListeners(), this.a.removeAllListeners(), this._listeners = {};
  }
  /**
   * Stops any running animation or tracking. `callback` is invoked with the
   * final value after stopping the animation, which is useful for updating
   * state to match the animation position with layout.
   */
  stopAnimation(callback) {
    this.r.stopAnimation(), this.g.stopAnimation(), this.b.stopAnimation(), this.a.stopAnimation(), callback && callback(this.__getValue());
  }
  /**
   * Stops any animation and resets the value to its original.
   */
  resetAnimation(callback) {
    this.r.resetAnimation(), this.g.resetAnimation(), this.b.resetAnimation(), this.a.resetAnimation(), callback && callback(this.__getValue());
  }
  __getValue() {
    return this.nativeColor != null ? this.nativeColor : "rgba(" + this.r.__getValue() + ", " + this.g.__getValue() + ", " + this.b.__getValue() + ", " + this.a.__getValue() + ")";
  }
  __attach() {
    this.r.__addChild(this), this.g.__addChild(this), this.b.__addChild(this), this.a.__addChild(this), super.__attach();
  }
  __detach() {
    this.r.__removeChild(this), this.g.__removeChild(this), this.b.__removeChild(this), this.a.__removeChild(this), super.__detach();
  }
  __makeNative(platformConfig) {
    this.r.__makeNative(platformConfig), this.g.__makeNative(platformConfig), this.b.__makeNative(platformConfig), this.a.__makeNative(platformConfig), super.__makeNative(platformConfig);
  }
  __getNativeConfig() {
    return {
      type: "color",
      r: this.r.__getNativeTag(),
      g: this.g.__getNativeTag(),
      b: this.b.__getNativeTag(),
      a: this.a.__getNativeTag(),
      nativeColor: this.nativeColor
    };
  }
}
//# sourceMappingURL=AnimatedColor.js.map
