"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var NativeEventEmitter_exports = {};
__export(NativeEventEmitter_exports, {
  default: () => NativeEventEmitter
});
module.exports = __toCommonJS(NativeEventEmitter_exports);
var import_react_native_web_internals = require("react-native-web-internals"), import_react_native_web_internals2 = require("react-native-web-internals"), import_RCTDeviceEventEmitter = __toESM(require("./RCTDeviceEventEmitter"));
class NativeEventEmitter {
  constructor(nativeModule) {
    import_react_native_web_internals2.Platform.OS === "ios" && ((0, import_react_native_web_internals.invariant)(
      nativeModule != null,
      "`new NativeEventEmitter()` requires a non-null argument."
    ), this._nativeModule = nativeModule);
  }
  addListener(eventType, listener, context) {
    var _this$_nativeModule;
    (_this$_nativeModule = this._nativeModule) == null || _this$_nativeModule.addListener(eventType);
    var subscription = import_RCTDeviceEventEmitter.default.addListener(
      eventType,
      listener,
      context
    );
    return {
      remove: () => {
        if (subscription != null) {
          var _this$_nativeModule2;
          (_this$_nativeModule2 = this._nativeModule) == null || _this$_nativeModule2.removeListeners(1), subscription.remove(), subscription = null;
        }
      }
    };
  }
  /**
   * @deprecated Use `remove` on the EventSubscription from `addListener`.
   */
  removeListener(eventType, listener) {
    var _this$_nativeModule3;
    (_this$_nativeModule3 = this._nativeModule) == null || _this$_nativeModule3.removeListeners(1), import_RCTDeviceEventEmitter.default.removeListener(eventType, listener);
  }
  emit(eventType) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)
      args[_key - 1] = arguments[_key];
    import_RCTDeviceEventEmitter.default.emit(eventType, ...args);
  }
  removeAllListeners(eventType) {
    var _this$_nativeModule4;
    (0, import_react_native_web_internals.invariant)(
      eventType != null,
      "`NativeEventEmitter.removeAllListener()` requires a non-null argument."
    ), (_this$_nativeModule4 = this._nativeModule) == null || _this$_nativeModule4.removeListeners(this.listenerCount(eventType)), import_RCTDeviceEventEmitter.default.removeAllListeners(eventType);
  }
  listenerCount(eventType) {
    return import_RCTDeviceEventEmitter.default.listenerCount(eventType);
  }
}
//# sourceMappingURL=index.js.map
