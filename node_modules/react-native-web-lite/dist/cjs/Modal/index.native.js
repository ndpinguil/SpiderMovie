"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var Modal_exports = {};
__export(Modal_exports, {
  default: () => Modal_default
});
module.exports = __toCommonJS(Modal_exports);
var React = __toESM(require("react")), import_ModalAnimation = __toESM(require("./ModalAnimation")), import_ModalContent = __toESM(require("./ModalContent")), import_ModalFocusTrap = __toESM(require("./ModalFocusTrap")), import_ModalPortal = __toESM(require("./ModalPortal")), uniqueModalIdentifier = 0, activeModalStack = [], activeModalListeners = {};
function notifyActiveModalListeners() {
  if (activeModalStack.length !== 0) {
    var activeModalId = activeModalStack[activeModalStack.length - 1];
    activeModalStack.forEach((modalId) => {
      modalId in activeModalListeners && activeModalListeners[modalId](modalId === activeModalId);
    });
  }
}
function removeActiveModal(modalId) {
  modalId in activeModalListeners && (activeModalListeners[modalId](!1), delete activeModalListeners[modalId]);
  var index = activeModalStack.indexOf(modalId);
  index !== -1 && (activeModalStack.splice(index, 1), notifyActiveModalListeners());
}
function addActiveModal(modalId, listener) {
  removeActiveModal(modalId), activeModalStack.push(modalId), activeModalListeners[modalId] = listener, notifyActiveModalListeners();
}
var Modal = /* @__PURE__ */ React.forwardRef((props, forwardedRef) => {
  const {
    animationType,
    children,
    onDismiss,
    onRequestClose,
    onShow,
    transparent,
    visible = !0,
    ...rest
  } = props;
  var modalId = React.useMemo(() => uniqueModalIdentifier++, []), _React$useState = React.useState(!1), isActive = _React$useState[0], setIsActive = _React$useState[1], onDismissCallback = React.useCallback(() => {
    removeActiveModal(modalId), onDismiss && onDismiss();
  }, [modalId, onDismiss]), onShowCallback = React.useCallback(() => {
    addActiveModal(modalId, setIsActive), onShow && onShow();
  }, [modalId, onShow]);
  return React.useEffect(() => () => removeActiveModal(modalId), [modalId]), /* @__PURE__ */ React.createElement(
    import_ModalPortal.default,
    null,
    /* @__PURE__ */ React.createElement(
      import_ModalAnimation.default,
      {
        animationType,
        onDismiss: onDismissCallback,
        onShow: onShowCallback,
        visible
      },
      /* @__PURE__ */ React.createElement(
        import_ModalFocusTrap.default,
        {
          active: isActive
        },
        /* @__PURE__ */ React.createElement(
          import_ModalContent.default,
          {
            ...rest,
            active: isActive,
            onRequestClose,
            ref: forwardedRef,
            transparent
          },
          children
        )
      )
    )
  );
}), Modal_default = Modal;
//# sourceMappingURL=index.js.map
