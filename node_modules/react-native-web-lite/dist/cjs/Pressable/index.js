"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var Pressable_exports = {};
__export(Pressable_exports, {
  default: () => Pressable_default
});
module.exports = __toCommonJS(Pressable_exports);
var import_react_native_use_pressable = require("@tamagui/react-native-use-pressable"), React = __toESM(require("react")), import_react = require("react"), import_react_native_web_internals = require("react-native-web-internals"), import_react_native_web_internals2 = require("react-native-web-internals"), import_View = __toESM(require("../View/index")), import_jsx_runtime = require("react/jsx-runtime");
function Pressable(props, forwardedRef) {
  const {
    children,
    delayLongPress,
    delayPressIn,
    delayPressOut,
    disabled,
    focusable,
    onBlur,
    onContextMenu,
    onFocus,
    onHoverIn,
    onHoverOut,
    onKeyDown,
    onLongPress,
    onPress,
    onPressMove,
    onPressIn,
    onPressOut,
    style,
    testOnly_hovered,
    testOnly_pressed,
    ...rest
  } = props, [hovered, setHovered] = useForceableState(testOnly_hovered === !0), [focused, setFocused] = useForceableState(!1), [pressed, setPressed] = useForceableState(testOnly_pressed === !0), hostRef = (0, import_react.useRef)(null), setRef = (0, import_react_native_web_internals2.useMergeRefs)(forwardedRef, hostRef), pressConfig = (0, import_react.useMemo)(
    () => ({
      delayLongPress,
      delayPressStart: delayPressIn,
      delayPressEnd: delayPressOut,
      disabled,
      onLongPress,
      onPress,
      onPressChange: setPressed,
      onPressStart: onPressIn,
      onPressMove,
      onPressEnd: onPressOut
    }),
    [
      delayLongPress,
      delayPressIn,
      delayPressOut,
      disabled,
      onLongPress,
      onPress,
      onPressIn,
      onPressMove,
      onPressOut,
      setPressed
    ]
  ), pressEventHandlers = (0, import_react_native_use_pressable.usePressEvents)(hostRef, pressConfig), { onContextMenu: onContextMenuPress, onKeyDown: onKeyDownPress } = pressEventHandlers;
  (0, import_react_native_web_internals2.useHover)(hostRef, {
    contain: !0,
    disabled,
    onHoverChange: setHovered,
    onHoverStart: onHoverIn,
    onHoverEnd: onHoverOut
  });
  const interactionState = { hovered, focused, pressed }, blurHandler = React.useCallback(
    (e) => {
      disabled || e.nativeEvent.target === hostRef.current && (setFocused(!1), onBlur != null && onBlur(e));
    },
    [disabled, hostRef, setFocused, onBlur]
  ), focusHandler = React.useCallback(
    (e) => {
      disabled || e.nativeEvent.target === hostRef.current && (setFocused(!0), onFocus != null && onFocus(e));
    },
    [disabled, hostRef, setFocused, onFocus]
  ), contextMenuHandler = React.useCallback(
    (e) => {
      onContextMenuPress != null && onContextMenuPress(e), onContextMenu != null && onContextMenu(e);
    },
    [onContextMenu, onContextMenuPress]
  ), keyDownHandler = React.useCallback(
    (e) => {
      onKeyDownPress != null && onKeyDownPress(e), onKeyDown != null && onKeyDown(e);
    },
    [onKeyDown, onKeyDownPress]
  );
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
    import_View.default,
    {
      ...rest,
      ...pressEventHandlers,
      accessibilityDisabled: disabled,
      focusable: !disabled && focusable !== !1,
      onBlur: blurHandler,
      onContextMenu: contextMenuHandler,
      onFocus: focusHandler,
      onKeyDown: keyDownHandler,
      pointerEvents: disabled ? "none" : rest.pointerEvents,
      ref: setRef,
      style: [
        !disabled && styles.root,
        typeof style == "function" ? style(interactionState) : style
      ],
      children: typeof children == "function" ? children(interactionState) : children
    }
  );
}
function useForceableState(forced) {
  const [bool, setBool] = (0, import_react.useState)(!1);
  return [bool || forced, setBool];
}
const styles = import_react_native_web_internals.StyleSheet.create({
  root: {
    cursor: "pointer",
    touchAction: "manipulation"
  }
}), MemoedPressable = (0, import_react.memo)((0, import_react.forwardRef)(Pressable));
MemoedPressable.displayName = "Pressable";
var Pressable_default = MemoedPressable;
//# sourceMappingURL=index.js.map
